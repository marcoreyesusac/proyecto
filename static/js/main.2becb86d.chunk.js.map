{"version":3,"sources":["reportWebVitals.js","components/Textos/Titulo.js","screens/Login/Login.js","screens/NotFoundPage/NotFoundPage.js","screens/nuevousuario/nuevousuario.js","screens/Reportar/Reportar.js","screens/Reporte/Reporte.js","screens/Asistir/Asistir.js","screens/Carnet/Carnet.js","screens/Evento/Evento.js","screens/Visualizar/Visualizar.js","components/Link/Links.js","screens/Login/AcercaDe.js","screens/Reportes/Reportes.js","screens/Reportes/Reportesadmin.js","screens/Notificaciones/Notificacionescompany.js","screens/Notificaciones/Notificacionesusuarios.js","screens/Dashboard/Dashboard.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Titulo","titulo","style","textAlign","Label","fontSize","fontFamily","color","nombre","useStyles","makeStyles","theme","root","padding","display","alignItems","width","border","input","marginLeft","spacing","flex","iconButton","divider","height","margin","textField","backgroundColor","borderColor","button","fontWeight","font","tamAlert","centrarContenido","margenContenedor","marginRight","bloque","alinearCaja","borderRadius","withRouter","history","useState","activarBotonEntrar","setActivarBotonEntrar","PrimeraVez","setPrimeraVez","errorData","setErrorData","MensajeError","setMensajeError","classes","password","showPassword","valuesUser","setValues","handleChange","prop","event","target","value","mensajeNombre","setMensajeNombre","mensajeContrasena","setMensajeContrasena","user","error","setState","activarEfecto","setActivarEfecto","localStorage","setItem","useEffect","isSubscribed","user2","email","axios","post","response","data","auth","token","typeOfUser","name","cambiarEstadoEntrar","json","message","prevState","catch","setTimeout","push","className","align","alt","src","TextField","label","onChange","required","id","clsx","variant","Collapse","in","FormControl","InputLabel","htmlFor","OutlinedInput","type","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","onMouseDown","preventDefault","edge","labelWidth","Button","startIcon","CircularProgress","size","valido","Box","p","Alert","severity","NotFoundPage","centrarTexto","colorBloque","minHeight","alinearAlerta","bloqueTabla","alinearTabla","container","maxHeight","estiloAutoComplete","anchoTextField","anchoPagination","maxWidth","bloqueGrafica","grafica","background","contGrafica","overflowx","overflowy","ancho","maxAlto","colorHeadTable","Nuevousuario","props","lastname","Object","entries","length","console","log","alert","carnet","curso","reporte","multiline","rows","rowsMax","estudiante","cuerpo","cursoProyecto","setSubirArchivoExtNewName","accept","files","document","getElementById","reader","FileReader","readAsDataURL","arrTemp","split","onload","arrb64","result","requestOptions","servidor","contenedor","formControl","minWidth","alinearContenedor","table","subtitulos","text","root2","flexWrap","justifyContent","overflow","palette","paper","gridList","transform","title","primary","light","titleBar","inactive","pointerEvents","Carnet","dataReportes","setDataReportes","bufferServer","mensajeErr","setMensajeErr","banderaCambiarEstado","setBanderaCambiarEstado","mensajeNotificacion","setmensajeNotificacion","React","page","rowsPerPage","detallesReporte","open","setOpen","openEmpresa","setOpenEmpresa","setValue","tipoAlerta","setTipoAlerta","opciones","id_usuario","usuario","idReporte","datosUsu","carnetbusqueda","unafila","key","dataReporteslimpio","empresa","getDataReportes","a","get","getItem","map","o","index","evento","timeOut","setInterval","clearInterval","handleClose","espera","Paper","paddingLeft","Dialog","onClose","aria-labelledby","disableBackdropClick","DialogTitle","defaultValue","DialogContent","DialogContentText","DialogActions","e","content","user_iduserto","headers","correct","handleEnviarNoti","marginTop","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","filter","f","estado","toString","slice","row","hover","role","tabIndex","Evento","Visualizar","currentServer","setCurrentServer","setBufferServer","enviarArchivo","descripcion","Typography","link","textDecoration","wordWrap","margen","Links","to","path","use","texto","left","AcercaDe","drawerHeader","colorBar","esAutenticado","setEsAutenticado","modal","alignEnd","exact","component","Reportar","Reporte","Asistir","from","ReactDOM","render"],"mappings":"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","file":"static/js/main.2becb86d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport { Label } from 'reactstrap';\r\n\r\nexport default function Titulo(titulo) {\r\n    return (\r\n        <div style={{ textAlign: \"center\" }}>\r\n            <br>\r\n            </br>\r\n            <Label style={{ fontSize: \"28px\", textAlign: \"center\", fontFamily: \"Verdana\", color: \"#161557\" }}> {titulo.nombre} </Label>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Box from '@material-ui/core/Box';\r\nimport axios from 'axios';\r\nimport { Label } from 'reactstrap';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport clsx from 'clsx';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport 'date-fns';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport '@rmwc/typography/styles';\r\nimport Titulo from '../../components/Textos/Titulo';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '0px 0px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 400,\r\n        border: 'black 1px solid',\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    divider: {\r\n        height: 28,\r\n        margin: 4,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n    textField: {\r\n        backgroundColor: \"#FFFFFF\",\r\n        borderColor: '#000',\r\n    },\r\n    button: {\r\n        width: '250px',\r\n        margin: theme.spacing(1),\r\n        backgroundColor: \"#0B78F4\",\r\n        color: \"#FFFFFF\",\r\n        fontWeight: \"bold\",\r\n        font: \"Verdana\"\r\n    },\r\n    tamAlert: {\r\n        width: '200px',\r\n    },\r\n    centrarContenido: {\r\n        textAlign: 'center',\r\n        width: '360px',\r\n    },\r\n    margenContenedor: {\r\n        width: '50%',\r\n        border: 'black 3px solid',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n    },\r\n    bloque: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    alinearCaja: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n\r\n}));\r\n\r\n\r\nconst Login = ({ history }) => {\r\n\r\n    const [activarBotonEntrar, setActivarBotonEntrar] = useState(true);\r\n    const [PrimeraVez, setPrimeraVez] = useState(true);\r\n    const [errorData, setErrorData] = useState(false);\r\n    const [MensajeError, setMensajeError] = useState('');\r\n\r\n\r\n    const classes = useStyles();\r\n    const [valuesUser, setValues] = useState({\r\n        nombre: '',\r\n        password: '',\r\n        showPassword: false,\r\n    });\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...valuesUser, [prop]: event.target.value });\r\n    };\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...valuesUser, showPassword: !valuesUser.showPassword });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const [mensajeNombre, setMensajeNombre] = useState(false);\r\n    const [mensajeContrasena, setMensajeContrasena] = useState(false);\r\n\r\n    const initialState = {\r\n        user: {},\r\n        error: null\r\n    }\r\n    const [state, setState] = useState(initialState);\r\n\r\n    let [activarEfecto, setActivarEfecto] = useState(false);\r\n\r\n    if (PrimeraVez) {\r\n        localStorage.setItem('token', '')\r\n        localStorage.setItem('typeOfUser', '')\r\n        localStorage.setItem('nameUser', '')\r\n        localStorage.setItem('esAutenticado', false)\r\n        setPrimeraVez(false);\r\n    }\r\n    useEffect(\r\n        () => {\r\n            let isSubscribed = true;\r\n            if (activarEfecto) {\r\n                const user2 = {\r\n                    email: valuesUser.nombre,\r\n                    password: valuesUser.password\r\n                };\r\n                //ENVIAR DATOS DEL USUARIO\r\n                axios.post('https://ayd1-190621.herokuapp.com/LoginEmployee', user2)\r\n                    .then(response => {\r\n                        // console.log(response.data)\r\n                        //Verifica si el objeto de respuesta trae información o viene vacío\r\n                        if (response.data.auth) {\r\n                            setActivarEfecto(!activarEfecto)\r\n                            localStorage.setItem('token',response.data.data.token)\r\n                            localStorage.setItem('typeOfUser',response.data.data.typeOfUser)\r\n                            localStorage.setItem('nameUser',response.data.data.name)\r\n                            localStorage.setItem('esAutenticado',true)\r\n                            cambiarEstadoEntrar();\r\n                            response.json();\r\n                        } else {\r\n                            setActivarEfecto(!activarEfecto)\r\n                            //Bandera Para mostrar error en inicio de sesión\r\n                            if(response.data.error.message === 'E-mail or password incorrects, plese try again.'){\r\n                                setMensajeError('Correo o contraseña incorrecto, inténtelo de nuevo,')\r\n                            }else{\r\n                                setMensajeError('No se pudo realizar la petición. Contacte a su servidor. ')\r\n                            }\r\n                            setErrorData(true);\r\n                        }\r\n                    })\r\n                    .then(data => isSubscribed ? setState(prevState => ({\r\n                        ...prevState, user: data\r\n\r\n                    })) : null)\r\n                    .catch(error => {\r\n                        if (isSubscribed) {\r\n                            setState(prevState => ({\r\n                                ...prevState,\r\n                                error\r\n                            }));\r\n\r\n                            \r\n                            setMensajeError('');\r\n                            setActivarEfecto(false);\r\n                            setMensajeError('No se pudo conectar al servidor.')\r\n                            setErrorData(true);\r\n                        } \r\n                        // else {\r\n                        //     console.log(\"ERROR ---- \");\r\n                        // }\r\n                    });\r\n            }\r\n            return () => (isSubscribed = false);\r\n        },\r\n        [activarEfecto],\r\n    );\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        let valido = true;\r\n        if (valuesUser.nombre === '') {\r\n            setMensajeNombre(true);\r\n            valido = false;\r\n        }\r\n        if (valuesUser.password === '') {\r\n            setMensajeContrasena(true);\r\n            valido = false;\r\n        }\r\n        if (valido) {\r\n            setActivarEfecto(true);\r\n        }\r\n    };\r\n\r\n    const cambiarEstadoEntrar = () => {\r\n        setActivarBotonEntrar(false);\r\n        setTimeout(() => {\r\n            setValues({\r\n                nombre: '',\r\n                password: '',\r\n                showPassword: false,\r\n            });\r\n            setMensajeContrasena(false);\r\n            setMensajeNombre(false);\r\n            setActivarBotonEntrar(true);\r\n            history.push('/Inicio')\r\n        }, 3500);\r\n    }\r\n    //style={{ width: 'auto%', border: 'black 1px solid', borderRadius: '10px' }}\r\n    //style={{ backgroundImage: \" url('fondo.jpeg')\"}}\r\n    return (\r\n        <div className={classes.bloque}  >\r\n            <div className={classes.alinearCaja} >\r\n                <form style={{ margin: '30px' }} >\r\n                    <img align=\"center\" alt=\"imagen ususario iniciar sesión\" src=\"/users2.png\" />\r\n                    <Titulo nombre='Iniciar sesión' />\r\n                    <TextField\r\n                        label=\"Correo\"\r\n                        onChange={handleChange('nombre')}\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.nombre}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa un correo </Label>\r\n                    </Collapse>\r\n\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                        <OutlinedInput\r\n                            id=\"outlined-adornment-password\"\r\n                            type={valuesUser.showPassword ? 'text' : 'password'}\r\n                            value={valuesUser.password}\r\n                            onChange={handleChange('password')}\r\n                            endAdornment={\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowPassword}\r\n                                        onMouseDown={handleMouseDownPassword}\r\n                                        edge=\"end\"\r\n                                    >\r\n                                        {valuesUser.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                            labelWidth={70}\r\n                        />\r\n                    </FormControl>\r\n                    <Collapse in={mensajeContrasena}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa una contraseña</Label>\r\n                    </Collapse><Collapse in={!activarBotonEntrar}>\r\n                        <Button style={{ color: '#333333' }} startIcon={<CircularProgress />}>\r\n                            ...Entrando\r\n                        </Button>\r\n                    </Collapse>\r\n                    <Collapse in={activarBotonEntrar}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                            onClick={handleClick}\r\n                        >\r\n                            <VpnKeyIcon /> &nbsp;&nbsp;Entrar\r\n                        </Button>\r\n                    </Collapse>\r\n                    <Collapse in={errorData}>\r\n                        <Box p={1} >\r\n                            <Alert variant=\"filled\" severity=\"error\" width=\"10px\">\r\n                                {MensajeError}\r\n                            </Alert>\r\n                        </Box>\r\n                    </Collapse>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Login);\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Label } from 'reactstrap';\r\nconst useStyles = makeStyles(() => ({\r\n    bloque: {\r\n        textAlign: 'center',\r\n    }\r\n}));\r\n\r\nconst NotFoundPage = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <div className={classes.bloque}>\r\n                <Label style={{ fontSize: '200px' }}>404</Label>\r\n                <h3>This page could not be found</h3>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default NotFoundPage;","import TextField from '@material-ui/core/TextField';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n// import Box from '@material-ui/core/Box';\r\nimport axios from 'axios';\r\n// import { Label } from 'reactstrap';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n// import CircularProgress from '@material-ui/core/CircularProgress';\r\n// import OutlinedInput from '@material-ui/core/OutlinedInput';\r\n// import InputLabel from '@material-ui/core/InputLabel';\r\n// import InputAdornment from '@material-ui/core/InputAdornment';\r\n// import FormControl from '@material-ui/core/FormControl';\r\n// import Visibility from '@material-ui/icons/Visibility';\r\n// import VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport clsx from 'clsx';\r\n// import IconButton from '@material-ui/core/IconButton';\r\nimport 'date-fns';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n// import VpnKeyIcon from '@material-ui/icons/VpnKey';\r\n// import Alert from '@material-ui/lab/Alert';\r\nimport '@rmwc/typography/styles';\r\n// import Titulo from '../../components/Textos/Titulo';\r\nconst useStyles = makeStyles((theme) => ({\r\n    centrarTexto: {\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: '20px'\r\n    },\r\n    centrarContenido: {\r\n        textAlign: 'center',\r\n    },\r\n    colorBloque: {\r\n        backgroundColor: '#EBAC44',\r\n        minHeight: 635\r\n    },\r\n    bloque: {\r\n        textAlign: 'right',\r\n        display: 'block',\r\n    },\r\n    alinearAlerta: {\r\n        display: 'inline-block',\r\n        width: '50%'\r\n    },\r\n    bloqueTabla: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    alinearTabla: {\r\n        display: 'inline-block',\r\n        width: '88%',\r\n        backgroundColor: '#fff',\r\n        borderRadius: '20px'\r\n    },\r\n    container: {\r\n        maxHeight: 420,\r\n    },\r\n    estiloAutoComplete: {\r\n\r\n        // backgroundColor: '#FFF',\r\n        width: '100%',\r\n    },\r\n    anchoTextField: {\r\n        width: '70%',\r\n        backgroundColor: '#FFF',\r\n        borderRadius: '20px',\r\n    },\r\n    anchoPagination: {\r\n        maxWidth: '70%'\r\n    },\r\n    bloqueGrafica: {\r\n        textAlign: 'left',\r\n        display: 'block',\r\n        maxWidth: '20%'\r\n    },\r\n    grafica: {\r\n        padding: '4px',\r\n        background: '#fff',\r\n        borderRadius: '20px',\r\n    },\r\n    contGrafica: {\r\n        height: '420px',\r\n        width: '370',\r\n        border: '1px solid #ddd',\r\n        background: '#f1f1f1',\r\n        overflowx: 'scroll',\r\n        overflowy: 'scroll',\r\n        borderRadius: '20px',\r\n    },\r\n    ancho: {\r\n        width: 'auto',\r\n        height: 'auto',\r\n        borderRadius: '20px',\r\n    },\r\n    maxAlto: {\r\n        maxHeight: '500',\r\n    },\r\n    colorHeadTable: {\r\n        backgroundColor: '#E6E6E6',\r\n        fontWeight: 'bolder',\r\n        fontSize: '20',\r\n        fontFamily: 'arial',\r\n    }\r\n}));\r\n\r\nfunction Nuevousuario(props) {\r\n    const [activarBotonEntrar, setActivarBotonEntrar] = useState(true);\r\n    // const [PrimeraVez, setPrimeraVez] = useState(true);\r\n    // const [errorData, setErrorData] = useState(false);\r\n    // const [mensajeNombre, setMensajeNombre] = useState(false);\r\n    // const [mensajeContrasena, setMensajeContrasena] = useState(false);\r\n\r\n    const classes = useStyles();\r\n    const [valuesUser, setValues] = useState({\r\n        name: '',\r\n        lastname: '',\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...valuesUser, [prop]: event.target.value });\r\n    };\r\n\r\n    const initialState = {\r\n        user: {},\r\n        error: null\r\n    }\r\n    const [state, setState] = useState(initialState);\r\n\r\n    let [activarEfecto, setActivarEfecto] = useState(false);\r\n\r\n    useEffect(\r\n        () => {\r\n            let isSubscribed = true;\r\n            if (activarEfecto) {\r\n                const user2 = {\r\n\r\n                };\r\n                //ENVIAR DATOS DEL USUARIO\r\n                axios.post('http://localhost:3000/Login', user2)\r\n                    .then(response => {\r\n                        //Verifica si el objeto de respuesta trae información o viene vacío\r\n                        if (Object.entries(response.data).length !== 0) {\r\n\r\n                            response.json();\r\n                        } else {\r\n                            //Bandera Para mostrar error en inicio de sesión\r\n                            // setErrorData(true);\r\n                        }\r\n                    })\r\n                    .then(data => isSubscribed ? setState(prevState => ({\r\n                        ...prevState, user: data\r\n\r\n                    })) : null)\r\n                    .catch(error => {\r\n                        if (isSubscribed) {\r\n                            setState(prevState => ({\r\n                                ...prevState,\r\n                                error\r\n                            }));\r\n\r\n                            // setErrorData(false);\r\n                            setActivarEfecto(false);\r\n                            cambiarEstadoEntrar();\r\n\r\n                        } else {\r\n                            console.log(\"ERROR\");\r\n                        }\r\n                    });\r\n            }\r\n            return () => (isSubscribed = false);\r\n        },\r\n        [activarEfecto],\r\n    );\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        axios.post('https://ayd1-190621.herokuapp.com/RegisterEmployee', {\r\n            name: valuesUser.name,\r\n            lastname: valuesUser.lastname,\r\n            email: valuesUser.email,\r\n            password: valuesUser.password\r\n        })\r\n            .then((response) => {\r\n                if(response.data.auth){\r\n                    setValues({name: '',\r\n                    lastname: '',\r\n                    email: '',\r\n                    password: ''})\r\n                    alert(\"Nuevo usuario creado exitosamente.\");\r\n                }else{\r\n                    alert(\"Usuario no creado. Verifique los datos ingresados e inténtelo de nuevo.\");\r\n                }\r\n                // console.log(response);\r\n                \r\n            }, (error) => {\r\n                console.log(error);\r\n            }\r\n            );\r\n    }\r\n\r\n\r\n\r\n\r\n    const cambiarEstadoEntrar = () => {\r\n        setActivarBotonEntrar(false);\r\n        setTimeout(() => {\r\n            setValues({\r\n                nombre: '',\r\n                password: '',\r\n            });\r\n            // setMensajeContrasena(false);\r\n            // setMensajeNombre(false);\r\n            setActivarBotonEntrar(true);\r\n        }, 1000);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <br />\r\n            <div>\r\n                <div className=\"row justify-content-center\">\r\n                    {/* <div className=\"row\"> */}\r\n                    <div className=\"col col-lg-6 col-md-12 col-sm-12 col-12 order-sm-last order-last order-lg-first order-md-last\">\r\n                        <div className=\"card border-dark mb-3\">\r\n                            <div className=\"card-header\">\r\n                                <div className={classes.centrarTexto}>\r\n                                    Crear nuevo usuario\r\n                                    {/* <Typography use=\"headline3\">Formulario para Crear Usuario</Typography> */}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <div className={classes.centrarContenido}>\r\n                                    <br /><br />\r\n                                    <form id='nuevousuario'>\r\n                                        <TextField\r\n                                            label=\"Nombre\"\r\n                                            //   onChange={handleChange('nombre')}\r\n                                            onChange={handleChange('name')}\r\n\r\n                                            required\r\n                                            id=\"outlined-required\"\r\n                                            className={clsx(classes.margin, classes.textField)}\r\n                                            value={valuesUser.name}\r\n\r\n                                            variant=\"outlined\"\r\n                                        /><br /><br />\r\n                                        <TextField\r\n                                            label=\"Apellido\"\r\n                                            onChange={handleChange('lastname')}\r\n\r\n                                            required\r\n                                            id=\"outlined-required\"\r\n                                            className={clsx(classes.margin, classes.textField)}\r\n                                            value={valuesUser.lastname}\r\n                                            variant=\"outlined\"\r\n                                        /><br /><br />\r\n                                        <TextField\r\n                                            label=\"Correo\"\r\n                                            onChange={handleChange('email')}\r\n\r\n                                            required\r\n                                            id=\"outlined-required\"\r\n                                            className={clsx(classes.margin, classes.textField)}\r\n                                            variant=\"outlined\"\r\n                                            value={valuesUser.email}\r\n                                        /><br /><br />\r\n                                        <TextField\r\n                                            label=\"Contraseña\"\r\n                                            onChange={handleChange('password')}\r\n\r\n                                            required\r\n                                            id=\"outlined-required\"\r\n                                            className={clsx(classes.margin, classes.textField)}\r\n                                            variant=\"outlined\"\r\n                                            value={valuesUser.password}\r\n                                        /><br /><br /><br />\r\n                                        <Collapse in={activarBotonEntrar}><br />\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                size=\"large\"\r\n                                                style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                                                onClick={handleClick}\r\n                                            >\r\n                                                Registrar\r\n                                            </Button>\r\n                                        </Collapse>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default (Nuevousuario);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Box from '@material-ui/core/Box';\r\nimport axios from 'axios';\r\nimport { Label } from 'reactstrap';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport clsx from 'clsx';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport 'date-fns';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport '@rmwc/typography/styles';\r\nimport Titulo from '../../components/Textos/Titulo';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '0px 0px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 400,\r\n        border: 'black 1px solid',\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    divider: {\r\n        height: 28,\r\n        margin: 4,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n    textField: {\r\n        backgroundColor: \"#FFFFFF\",\r\n        borderColor: '#000',\r\n    },\r\n    button: {\r\n        width: '250px',\r\n        margin: theme.spacing(1),\r\n        backgroundColor: \"#0B78F4\",\r\n        color: \"#FFFFFF\",\r\n        fontWeight: \"bold\",\r\n        font: \"Verdana\"\r\n    },\r\n    tamAlert: {\r\n        width: '200px',\r\n    },\r\n    centrarContenido: {\r\n        textAlign: 'center',\r\n        width: '360px',\r\n    },\r\n    margenContenedor: {\r\n        width: '50%',\r\n        border: 'black 3px solid',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n    },\r\n    bloque: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    alinearCaja: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n\r\n}));\r\n\r\n\r\nconst Reportar = ({ history }) => {\r\n\r\n    const [activarBotonEntrar, setActivarBotonEntrar] = useState(true);\r\n    const [PrimeraVez, setPrimeraVez] = useState(true);\r\n    const [errorData, setErrorData] = useState(false);\r\n    const [MensajeError, setMensajeError] = useState('');\r\n\r\n\r\n    const classes = useStyles();\r\n    const [valuesUser, setValues] = useState({\r\n        nombre: '',\r\n        carnet: '',\r\n        curso: '',\r\n        reporte: ''\r\n    });\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...valuesUser, [prop]: event.target.value });\r\n    };\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...valuesUser, showPassword: !valuesUser.showPassword });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const [mensajeNombre, setMensajeNombre] = useState(false);\r\n    const [mensajeContrasena, setMensajeContrasena] = useState(false);\r\n\r\n    const initialState = {\r\n        user: {},\r\n        error: null\r\n    }\r\n    const [state, setState] = useState(initialState);\r\n\r\n    let [activarEfecto, setActivarEfecto] = useState(false);\r\n\r\n    \r\n    \r\n   \r\n\r\n    const cambiarEstadoEntrar = () => {\r\n        setActivarBotonEntrar(false);\r\n        setTimeout(() => {\r\n            setValues({\r\n                nombre: '',\r\n                password: '',\r\n                showPassword: false,\r\n            });\r\n            setMensajeContrasena(false);\r\n            setMensajeNombre(false);\r\n            setActivarBotonEntrar(true);\r\n            history.push('/Inicio')\r\n        }, 3500);\r\n    }\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        axios.post('http://35.202.67.211:4000/reporte', {\r\n            estudiante: valuesUser.nombre,\r\n            carnet: valuesUser.carnet,\r\n            cuerpo: valuesUser.reporte,\r\n            cursoProyecto: valuesUser.curso\r\n        })\r\n            .then((response) => {\r\n                console.log(response);\r\n                if(response.data != null){\r\n                    setValues({nombre: '',\r\n                    carnet: '',\r\n                    reporte: '',\r\n                    curso: ''})\r\n                    alert(\"Nuevo reporte creado exitosamente.\");\r\n                }else{\r\n                    alert(\"Reporte no creado. Verifique los datos ingresados e inténtelo de nuevo.\");\r\n                }\r\n                // console.log(response);\r\n                \r\n            }, (error) => {\r\n                console.log(error);\r\n            }\r\n            );\r\n    }\r\n    //style={{ width: 'auto%', border: 'black 1px solid', borderRadius: '10px' }}\r\n    //style={{ backgroundImage: \" url('fondo.jpeg')\"}}\r\n    return (\r\n        <div className={classes.bloque}  >\r\n            <div className={classes.alinearCaja} >\r\n                <form style={{ margin: '30px' }} >\r\n                    <Titulo nombre='Reportar' />\r\n                    <TextField\r\n                        label=\"Carnet\"\r\n                        onChange={handleChange('carnet')}\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.carnet}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa un carnet </Label>\r\n                    </Collapse>\r\n                    <TextField\r\n                        label=\"Nombre\"\r\n                        onChange={handleChange('nombre')}\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.nombre}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa un nombre </Label>\r\n                    </Collapse>\r\n\r\n                    <TextField\r\n                        label=\"Curso/Proyecto\"\r\n                        onChange={handleChange('curso')}\r\n                        required\r\n                        id=\"outlined-required\"\r\n                       \r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.curso}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa un curso o proyecto </Label>\r\n                    </Collapse>\r\n                    <TextField\r\n                        label=\"Descripción de reporte\"\r\n                        onChange={handleChange('reporte')}\r\n                        required\r\n                        multiline\r\n                        rows={4}\r\n                        rowsMax={8}\r\n                        id=\"outlined-required\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.reporte}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa tu reporte</Label>\r\n                    </Collapse>\r\n\r\n                    \r\n                    \r\n                   \r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                            onClick={handleClick}\r\n                        >\r\n                             &nbsp;&nbsp;Registrar\r\n                        </Button>\r\n               \r\n                    <Collapse in={errorData}>\r\n                        <Box p={1} >\r\n                            <Alert variant=\"filled\" severity=\"error\" width=\"10px\">\r\n                                {MensajeError}\r\n                            </Alert>\r\n                        </Box>\r\n                    </Collapse>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Reportar);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Box from '@material-ui/core/Box';\r\nimport axios from 'axios';\r\nimport { Label } from 'reactstrap';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport clsx from 'clsx';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport 'date-fns';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport '@rmwc/typography/styles';\r\nimport Titulo from '../../components/Textos/Titulo';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '0px 0px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 400,\r\n        border: 'black 1px solid',\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    divider: {\r\n        height: 28,\r\n        margin: 4,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n    textField: {\r\n        backgroundColor: \"#FFFFFF\",\r\n        borderColor: '#000',\r\n    },\r\n    button: {\r\n        width: '250px',\r\n        margin: theme.spacing(1),\r\n        backgroundColor: \"#0B78F4\",\r\n        color: \"#FFFFFF\",\r\n        fontWeight: \"bold\",\r\n        font: \"Verdana\"\r\n    },\r\n    tamAlert: {\r\n        width: '200px',\r\n    },\r\n    centrarContenido: {\r\n        textAlign: 'center',\r\n        width: '360px',\r\n    },\r\n    margenContenedor: {\r\n        width: '50%',\r\n        border: 'black 3px solid',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n    },\r\n    bloque: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    alinearCaja: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n\r\n}));\r\n\r\n\r\nconst Reportar = ({ history }) => {\r\n\r\n    const [activarBotonEntrar, setActivarBotonEntrar] = useState(true);\r\n    const [PrimeraVez, setPrimeraVez] = useState(true);\r\n    const [errorData, setErrorData] = useState(false);\r\n    const [MensajeError, setMensajeError] = useState('');\r\n\r\n\r\n    const classes = useStyles();\r\n    const [valuesUser, setValues] = useState({\r\n        nombre: '',\r\n        carnet: '',\r\n        curso: '',\r\n        reporte: ''\r\n    });\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...valuesUser, [prop]: event.target.value });\r\n    };\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...valuesUser, showPassword: !valuesUser.showPassword });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const [mensajeNombre, setMensajeNombre] = useState(false);\r\n    const [mensajeContrasena, setMensajeContrasena] = useState(false);\r\n\r\n    const initialState = {\r\n        user: {},\r\n        error: null\r\n    }\r\n    const [state, setState] = useState(initialState);\r\n\r\n    let [activarEfecto, setActivarEfecto] = useState(false);\r\n\r\n    \r\n    \r\n    const handleClick = (event) => {\r\n        \r\n    };\r\n\r\n    const cambiarEstadoEntrar = () => {\r\n        setActivarBotonEntrar(false);\r\n        setTimeout(() => {\r\n            setValues({\r\n                nombre: '',\r\n                password: '',\r\n                showPassword: false,\r\n            });\r\n            setMensajeContrasena(false);\r\n            setMensajeNombre(false);\r\n            setActivarBotonEntrar(true);\r\n            history.push('/Inicio')\r\n        }, 3500);\r\n    }\r\n    //style={{ width: 'auto%', border: 'black 1px solid', borderRadius: '10px' }}\r\n    //style={{ backgroundImage: \" url('fondo.jpeg')\"}}\r\n    return (\r\n        <div className={classes.bloque}  >\r\n            <div className={classes.alinearCaja} >\r\n                <form style={{ margin: '30px' }} >\r\n                    <Titulo nombre='Reportar' />\r\n                    <TextField\r\n                        label=\"Carnet\"\r\n                        onChange={handleChange('carnet')}\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.carnet}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa un carnet </Label>\r\n                    </Collapse>\r\n                    <TextField\r\n                        label=\"Nombre\"\r\n                        onChange={handleChange('nombre')}\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.nombre}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa un nombre </Label>\r\n                    </Collapse>\r\n\r\n                    <TextField\r\n                        label=\"Curso/Proyecto\"\r\n                        onChange={handleChange('curso')}\r\n                        required\r\n                        id=\"outlined-required\"\r\n                       \r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.curso}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa un curso o proyecto </Label>\r\n                    </Collapse>\r\n                    <TextField\r\n                        label=\"Descripción de reporte\"\r\n                        onChange={handleChange('reporte')}\r\n                        required\r\n                        multiline\r\n                        rows={4}\r\n                        rowsMax={8}\r\n                        id=\"outlined-required\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.reporte}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa tu reporte</Label>\r\n                    </Collapse>\r\n\r\n                    \r\n                    \r\n                   \r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                            onClick={handleClick}\r\n                        >\r\n                             &nbsp;&nbsp;Registrar\r\n                        </Button>\r\n               \r\n                    <Collapse in={errorData}>\r\n                        <Box p={1} >\r\n                            <Alert variant=\"filled\" severity=\"error\" width=\"10px\">\r\n                                {MensajeError}\r\n                            </Alert>\r\n                        </Box>\r\n                    </Collapse>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Reportar);","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Box from '@material-ui/core/Box';\r\nimport axios from 'axios';\r\nimport { Label } from 'reactstrap';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport clsx from 'clsx';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport 'date-fns';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport '@rmwc/typography/styles';\r\nimport Titulo from '../../components/Textos/Titulo';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '0px 0px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 400,\r\n        border: 'black 1px solid',\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    divider: {\r\n        height: 28,\r\n        margin: 4,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n    textField: {\r\n        backgroundColor: \"#FFFFFF\",\r\n        borderColor: '#000',\r\n    },\r\n    button: {\r\n        width: '250px',\r\n        margin: theme.spacing(1),\r\n        backgroundColor: \"#0B78F4\",\r\n        color: \"#FFFFFF\",\r\n        fontWeight: \"bold\",\r\n        font: \"Verdana\"\r\n    },\r\n    tamAlert: {\r\n        width: '200px',\r\n    },\r\n    centrarContenido: {\r\n        textAlign: 'center',\r\n        width: '360px',\r\n    },\r\n    margenContenedor: {\r\n        width: '50%',\r\n        border: 'black 3px solid',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n    },\r\n    bloque: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    alinearCaja: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n\r\n}));\r\n\r\n\r\nconst Asistir = ({ history }) => {\r\n\r\n    const [activarBotonEntrar, setActivarBotonEntrar] = useState(true);\r\n    const [PrimeraVez, setPrimeraVez] = useState(true);\r\n    const [errorData, setErrorData] = useState(false);\r\n    const [MensajeError, setMensajeError] = useState('');\r\n    let [subirArchivoExtNewName, setSubirArchivoExtNewName] = useState('');\r\n\r\n\r\n    const classes = useStyles();\r\n    const [valuesUser, setValues] = useState({\r\n        nombre: '',\r\n        carnet: '',\r\n        curso: '',\r\n        reporte: ''\r\n    });\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...valuesUser, [prop]: event.target.value });\r\n    };\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...valuesUser, showPassword: !valuesUser.showPassword });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const [mensajeNombre, setMensajeNombre] = useState(false);\r\n    const [mensajeContrasena, setMensajeContrasena] = useState(false);\r\n\r\n    const initialState = {\r\n        user: {},\r\n        error: null\r\n    }\r\n    const [state, setState] = useState(initialState);\r\n\r\n    let [activarEfecto, setActivarEfecto] = useState(false);\r\n\r\n    \r\n    \r\n   \r\n\r\n    const cambiarEstadoEntrar = () => {\r\n        setActivarBotonEntrar(false);\r\n        setTimeout(() => {\r\n            setValues({\r\n                nombre: '',\r\n                password: '',\r\n                showPassword: false,\r\n            });\r\n            setMensajeContrasena(false);\r\n            setMensajeNombre(false);\r\n            setActivarBotonEntrar(true);\r\n            history.push('/Inicio')\r\n        }, 3500);\r\n    }\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        let input = document.getElementById('inputArchivo');\r\n        let files = input.files[0];\r\n        var reader = new FileReader();\r\n        reader.readAsDataURL(files);\r\n        const arrTemp = files.name.split('.');\r\n        setSubirArchivoExtNewName('.' + arrTemp[arrTemp.length-1]);\r\n        reader.onload = () => {\r\n            const arrb64 = reader.result.split(\",\");\r\n            let name = files.name;\r\n            \r\n        const requestOptions = {\r\n        \"estudiante\": valuesUser.nombre,\r\n        \"carnet\": valuesUser.carnet,\r\n        \"evento\": valuesUser.curso,\r\n        \"id_evento\": valuesUser.reporte,\r\n        \"imagen\": arrb64[1]\r\n        }\r\n\r\n        console.log(requestOptions);\r\n        axios.post('https://api.redes214.tk/asistencia', {\r\n            \r\n    \"estudiante\": valuesUser.nombre,\r\n    \"carnet\": valuesUser.carnet,\r\n    \"evento\": valuesUser.curso,\r\n    \"id_evento\": valuesUser.reporte,\r\n    \"imagen\": arrb64[1]\r\n\r\n        })\r\n            .then((response) => {\r\n                console.log(response);\r\n                if(response.data != null){\r\n                    setValues({nombre: '',\r\n                    carnet: '',\r\n                    reporte: '',\r\n                    curso: ''})\r\n                    alert(\"Exito marcando asistencia, servidor:\"+response.data.servidor);\r\n                }else{\r\n                    alert(\"Reporte no creado. Verifique los datos ingresados e inténtelo de nuevo.\");\r\n                }\r\n                // console.log(response);\r\n                \r\n            }, (error) => {\r\n                console.log(error);\r\n            }\r\n            );\r\n}    }\r\n    //style={{ width: 'auto%', border: 'black 1px solid', borderRadius: '10px' }}\r\n    //style={{ backgroundImage: \" url('fondo.jpeg')\"}}\r\n    return (\r\n        <div className={classes.bloque}  >\r\n            <div className={classes.alinearCaja} >\r\n                <form style={{ margin: '30px' }} >\r\n                    <Titulo nombre='Nueva asistencia' />\r\n                    <TextField\r\n                        label=\"Carnet\"\r\n                        onChange={handleChange('carnet')}\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.carnet}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa un carnet </Label>\r\n                    </Collapse>\r\n                    <TextField\r\n                        label=\"Nombre\"\r\n                        onChange={handleChange('nombre')}\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.nombre}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa un nombre </Label>\r\n                    </Collapse>\r\n\r\n                    <TextField\r\n                        label=\"Evento\"\r\n                        onChange={handleChange('curso')}\r\n                        required\r\n                        id=\"outlined-required\"\r\n                       \r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.curso}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa un evento</Label>\r\n                    </Collapse>\r\n                    <TextField\r\n                        label=\"ID del evento\"\r\n                        onChange={handleChange('reporte')}\r\n                        required\r\n                        multiline\r\n                        id=\"outlined-required\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        value={valuesUser.reporte}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    <Collapse in={mensajeNombre}>\r\n                        <Label style={{ color: \"#C62E2E\" }}> Ingresa id del evento</Label>\r\n                    </Collapse>\r\n\r\n                    <input id=\"inputArchivo\" type=\"file\" accept=\"image/*, .txt, .pdf, audio/*, video/*\"></input>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    \r\n                    \r\n                   \r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                            onClick={handleClick}\r\n                        >\r\n                             &nbsp;&nbsp;Registrar asistencia\r\n                        </Button>\r\n               \r\n                    <Collapse in={errorData}>\r\n                        <Box p={1} >\r\n                            <Alert variant=\"filled\" severity=\"error\" width=\"10px\">\r\n                                {MensajeError}\r\n                            </Alert>\r\n                        </Box>\r\n                    </Collapse>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Asistir);\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport 'date-fns';\r\nimport { Label } from 'reactstrap';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { Typography } from '@material-ui/core';\r\nimport '@rmwc/typography/styles';\r\nimport Titulo from '../../components/Textos/Titulo';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\n// import GridList from '@material-ui/core/GridList';\r\n// import GridListTile from '@material-ui/core/GridListTile';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    contenedor: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    alinearContenedor: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    table: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: '#393E46 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 940,\r\n    },\r\n    subtitulos: {\r\n        fontSize: '18px',\r\n        fontWeight: 'bolder',\r\n    },\r\n    text: {\r\n        fontSize: '19px',\r\n        fontFamily: 'Calibri'\r\n    },\r\n    root2: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        flexWrap: 'nowrap',\r\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n        transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n        color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n        background:\r\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n    inactive: {\r\n        pointerEvents: 'none', // pointer-events not supported below IE11\r\n        position: 'fixed'\r\n    }\r\n\r\n}));\r\n\r\n\r\nexport default function Carnet() {\r\n    const classes = useStyles();\r\n    let [dataReportes, setDataReportes] = useState([]);\r\n    let [currentServer, setCurrentServer] = useState('');\r\n    let [bufferServer, setBufferServer] = useState('');\r\n    let [errorData, setErrorData] = useState(false);\r\n    let [mensajeErr, setMensajeErr] = useState('');\r\n    let [banderaCambiarEstado, setBanderaCambiarEstado] = useState(false);\r\n    let [mensajeNotificacion, setmensajeNotificacion] = useState(false);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    let [detallesReporte, setDetallesReporte] = useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openEmpresa, setOpenEmpresa] = React.useState(false);\r\n    const [value, setValue] = React.useState('');\r\n    let [carnetbusqueda, setCarnet] = React.useState('');\r\n    let [tipoAlerta, setTipoAlerta] = useState('success');\r\n    let [opciones, setOpciones] = useState('');\r\n    let [datosUsu, setDatosUsu] = useState({\r\n        id_usuario: '',\r\n        usuario: '',\r\n        idReporte: '',\r\n    });\r\nconst [valuesUser, setValues] = useState({\r\n        carnetbusqueda:''\r\n    });\r\nconst unafila = {\r\n            key: '0',\r\n            carnet: '0',\r\n            cuerpo: '',\r\n            estudiante: '',\r\n            curso:'',\r\n            servidor:''\r\n        }\r\n        const dataReporteslimpio=[];\r\n        dataReporteslimpio.push(unafila);\r\n    let [empresaM, setEmpresaM] = useState({\r\n        idReporte: '',\r\n        empresa: ''\r\n    });\r\n\r\nconst enviarArchivo = async(event, carnet, nombre, descripcion, servidor, curso) => {\r\n        \r\n        localStorage.setItem('carnetactual',carnet);\r\n        localStorage.setItem('nombreactual',nombre);\r\n        localStorage.setItem('descripcionactual',descripcion);\r\n        localStorage.setItem('servidoractual',servidor);\r\nlocalStorage.setItem('cursoactual',curso);\r\n         setOpenEmpresa(true);\r\n\r\n        \r\n    };\r\n\r\n\r\n    const getDataReportes = async () => {\r\n\r\n        try {\r\n\r\n const { data } = await axios.get(\r\n                'https://api.redes214.tk/asistenciaEstudiante/'+localStorage.getItem('busqueda'));\r\nconsole.log(data);\r\n            // if (data && data.length) {\r\n            if (data != null) {\r\n                setErrorData(false);\r\n               \r\n                dataReportes = data.data.map((o, index) => {\r\n                    \r\n                    return {\r\n\r\n                        carnet: o.estudiante.carnet, nombre: o.estudiante.nombre, evento:o.evento.nombre\r\n\r\n                    }\r\n                   \r\n\r\n                });\r\n            } else {\r\n                setErrorData(true);\r\n                setMensajeErr('No se pudo recuperar la información de los reportes.')\r\n            }\r\n       \r\n }\r\n        catch (err) {\r\n            setErrorData(true);\r\n            setMensajeErr('')\r\n            setDataReportes([]);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        const timeOut = setInterval(() => {\r\n            setDataReportes([...dataReporteslimpio]);\r\n            getDataReportes();\r\n            console.log(dataReportes.length);\r\n            if (dataReportes.length===0) {\r\n               dataReportes.push(unafila);\r\n               console.log(dataReportes);\r\n\r\n            }\r\n\r\n            setDataReportes([...dataReportes]);\r\n        }, 2000)\r\n        getDataReportes();\r\n        return () => clearInterval(timeOut);\r\n\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...valuesUser, [prop]: event.target.value });\r\n    };\r\n\r\n const handleBuscar = (event) => {\r\n    console.log(valuesUser.carnetbusqueda);\r\n    localStorage.setItem('busqueda',valuesUser.carnetbusqueda);\r\n    console.log(localStorage.getItem('busqueda'));\r\n}\r\n\r\n const handleLimpiar = (event) => {\r\n    console.log(valuesUser.carnetbusqueda);\r\n    localStorage.setItem('busqueda','');\r\n    console.log(localStorage.getItem('busqueda'));\r\n}\r\n\r\n    const handleClose = () => {\r\n        // console.log(value)\r\n        setValue('')\r\n        setOpen(false);\r\n        setOpenEmpresa(false);\r\n    };\r\n\r\n    const handleEnviarNotiEmpresa = (event) => {\r\n       \r\n        setOpenEmpresa(false);\r\n    };\r\nconst handleClick = (event) => {\r\n      \r\n    }\r\n    const handleEnviarNoti = (event) => {\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        detallesReporte += '<br>Comentario: ' + value;\r\n        let data = {\r\n            content: detallesReporte,\r\n            user_iduserto: datosUsu.id_usuario\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCitizenNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                //  console.log(response)\r\n                if (response.data.correct) {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente. ' +\r\n                        '\\nSe ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    // setmensajeConfirmacion('Se ha enviado una notificación al ciudadano con la actualización de su reporte exitosamente.')\r\n                } else {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente.' +\r\n                        '\\nNo se ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    setTipoAlerta('error');\r\n                }\r\n                espera();\r\n            }\r\n            );\r\n        setValue('')\r\n        setOpen(false);\r\n    };\r\n\r\n    const espera = () => {\r\n        setBanderaCambiarEstado(true);\r\n        setTimeout(() => {\r\n            setBanderaCambiarEstado(false);\r\n            setmensajeNotificacion('');\r\n            setTipoAlerta('success');\r\n        }, 5000)\r\n    }\r\n\r\n    const mostrarNotificacion = (tipo_de_cambio, idReporte, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        let nuevoEstado = '';\r\n        if (tipo_de_cambio === 1) {\r\n            setmensajeNotificacion('Ha seleccionado el reporte Registro No. ' + idReporte + ' para ser atentido. ')\r\n            nuevoEstado = 'ATENDIDO';\r\n            espera();\r\n        } else if (tipo_de_cambio === 2) {\r\n            nuevoEstado = 'PROCESADO';\r\n            let t = 'Delincuencia';\r\n            let company = 'Policía Nacional Civil'\r\n            if (tipo === 'bump') {\r\n                t = 'Bache'\r\n                company = 'Municipalidad de Mixco'\r\n            }\r\n            setEmpresaM({ idReporte: idReporte, empresa: company })\r\n            setDetallesReporte(\r\n                'Estado: ' + nuevoEstado +\r\n                '\\nRegistro No. : ' + idReporte +\r\n                '\\nTipo: ' + t +\r\n                '\\nFecha del Reporte: ' + fecha_reportado +\r\n                '\\nFecha del Problema: ' + fecha_problema +\r\n                '\\nDirección: ' + direccion +\r\n                '\\nDescripción: ' + descripcion\r\n            );\r\n            setOpenEmpresa(true);\r\n        } else if (tipo_de_cambio === 3) {\r\n            nuevoEstado = 'CERRADO'\r\n            if (usuario !== 'Anónimo') {\r\n                setDatosUsu({ id_usuario: id_usuario, usuario: usuario, idReporte: idReporte })\r\n                let t = 'Delincuencia';\r\n                if (tipo === 'bump') {\r\n                    t = 'Bache'\r\n                }\r\n                setDetallesReporte(\r\n                    'Estado: ' + nuevoEstado +\r\n                    '\\nRegistro No. : ' + idReporte +\r\n                    '\\nTipo: ' + t +\r\n                    '\\nFecha del Reporte: ' + fecha_reportado +\r\n                    '\\nFecha del Problema: ' + fecha_problema +\r\n                    '\\nDirección: ' + direccion +\r\n                    '\\nDescripción: ' + descripcion\r\n                );\r\n                setOpen(true);\r\n            } else {\r\n                setmensajeNotificacion('El reporte Registro No. ' + idReporte + ' ha sido cerrado exitosamente. ')\r\n                espera();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const metodoBtnCambiarEstado = (event, idReport, idStatus, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        const data = {\r\n            status_idstatus: idStatus + 1,\r\n        }\r\n        axios.put('https://ayd1-190621.herokuapp.com/ModifyReportStatus/' + idReport,\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.correct) {\r\n                    mostrarNotificacion(idStatus, idReport, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario);\r\n                }\r\n            }\r\n            );\r\n    }\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <div style={{ paddingLeft: '100px' }} >\r\n              <form style={{ margin: '30px' }} >\r\n                    <Titulo nombre='Reportar' />\r\n                    <TextField\r\n                        label=\"Carnet\"\r\n                        required\r\n                         onChange={handleChange('carnetbusqueda')}\r\n                         value={valuesUser.carnetbusqueda}\r\n                        id=\"outlined-required\"\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    \r\n                   \r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                           \r\n                            style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                            onClick={handleBuscar}\r\n                        >\r\n                             &nbsp;&nbsp;Buscar\r\n                        </Button>\r\n                <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                           \r\n                            style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                            onClick={handleLimpiar}\r\n                        >\r\n                             &nbsp;&nbsp;Limpiar busqueda\r\n                        </Button>\r\n                </form>  \r\n            </div>\r\n            <Collapse in={banderaCambiarEstado}>\r\n                <Alert variant=\"filled\" severity={tipoAlerta} width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeNotificacion}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={errorData}>\r\n                <Alert variant=\"filled\" severity='error' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeErr}\r\n                </Alert>\r\n            </Collapse>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Ciudadanos\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea defaultValue={detallesReporte} rows='10' />\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{ width: '60%' }}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={(e) => { handleEnviarNoti(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog open={openEmpresa} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n               \r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n                <DialogContent>\r\n                    \r\n                     <form style={{ margin: '10px' }} >\r\n                    <Titulo nombre='Reporte' />\r\n                    <TextField\r\n                        label=\"Carnet\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('carnetactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    \r\n                    <TextField\r\n                        label=\"Nombre\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('nombreactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n\r\n                    \r\n\r\n                    <TextField\r\n                        label=\"Curso/Proyecto\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                       \r\n                        value={localStorage.getItem('cursoactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n\r\n                    \r\n                    <TextField\r\n                        label=\"Descripción de reporte\"\r\n                        required\r\n                        multiline\r\n                        rows={4}\r\n                        rowsMax={8}\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('descripcionactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    <TextField\r\n                        label=\"Servidor\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('servidoractual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <div  style={{marginTop:'15px', width: '345px',padding:'10px',background:'#0c6efd', color:'#fff'}} >\r\n                     <h6>Solicitud atendida por el servidor {bufferServer}</h6>\r\n                    </div>\r\n                </form>\r\n                \r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={(e) => { handleEnviarNotiEmpresa(e) }} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Carnet</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Nombre</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Evento</TableCell>\r\n                        \r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {dataReportes.filter(f => (opciones !== \"\" && opciones !== null ? f.estado.toString() === opciones : true)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                           \r\n                            if(row.carnet != '0'){\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.key}>\r\n                                    \r\n                                    <TableCell>\r\n                                        {row.carnet}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {row.nombre}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {row.evento}\r\n                                        \r\n                                    </TableCell>\r\n                                    \r\n                                    \r\n                                </TableRow>\r\n                            );\r\n                        }\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            \r\n        </Paper>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport 'date-fns';\r\nimport { Label } from 'reactstrap';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { Typography } from '@material-ui/core';\r\nimport '@rmwc/typography/styles';\r\nimport Titulo from '../../components/Textos/Titulo';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\n// import GridList from '@material-ui/core/GridList';\r\n// import GridListTile from '@material-ui/core/GridListTile';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    contenedor: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    alinearContenedor: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    table: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: '#393E46 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 940,\r\n    },\r\n    subtitulos: {\r\n        fontSize: '18px',\r\n        fontWeight: 'bolder',\r\n    },\r\n    text: {\r\n        fontSize: '19px',\r\n        fontFamily: 'Calibri'\r\n    },\r\n    root2: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        flexWrap: 'nowrap',\r\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n        transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n        color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n        background:\r\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n    inactive: {\r\n        pointerEvents: 'none', // pointer-events not supported below IE11\r\n        position: 'fixed'\r\n    }\r\n\r\n}));\r\n\r\n\r\nexport default function Evento() {\r\n    const classes = useStyles();\r\n    let [dataReportes, setDataReportes] = useState([]);\r\n    let [currentServer, setCurrentServer] = useState('');\r\n    let [bufferServer, setBufferServer] = useState('');\r\n    let [errorData, setErrorData] = useState(false);\r\n    let [mensajeErr, setMensajeErr] = useState('');\r\n    let [banderaCambiarEstado, setBanderaCambiarEstado] = useState(false);\r\n    let [mensajeNotificacion, setmensajeNotificacion] = useState(false);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    let [detallesReporte, setDetallesReporte] = useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openEmpresa, setOpenEmpresa] = React.useState(false);\r\n    const [value, setValue] = React.useState('');\r\n    let [carnetbusqueda, setCarnet] = React.useState('');\r\n    let [tipoAlerta, setTipoAlerta] = useState('success');\r\n    let [opciones, setOpciones] = useState('');\r\n    let [datosUsu, setDatosUsu] = useState({\r\n        id_usuario: '',\r\n        usuario: '',\r\n        idReporte: '',\r\n    });\r\nconst [valuesUser, setValues] = useState({\r\n        carnetbusqueda:''\r\n    });\r\nconst unafila = {\r\n            key: '0',\r\n            carnet: '0',\r\n            cuerpo: '',\r\n            estudiante: '',\r\n            curso:'',\r\n            servidor:''\r\n        }\r\n        const dataReporteslimpio=[];\r\n        dataReporteslimpio.push(unafila);\r\n    let [empresaM, setEmpresaM] = useState({\r\n        idReporte: '',\r\n        empresa: ''\r\n    });\r\n\r\nconst enviarArchivo = async(event, carnet, nombre, descripcion, servidor, curso) => {\r\n        \r\n        localStorage.setItem('carnetactual',carnet);\r\n        localStorage.setItem('nombreactual',nombre);\r\n        localStorage.setItem('descripcionactual',descripcion);\r\n        localStorage.setItem('servidoractual',servidor);\r\nlocalStorage.setItem('cursoactual',curso);\r\n         setOpenEmpresa(true);\r\n\r\n        \r\n    };\r\n\r\n\r\n    const getDataReportes = async () => {\r\n\r\n\r\n const { data } = await axios.get(\r\n                'https://api.redes214.tk/asistenciaEvento/'+localStorage.getItem('busqueda'));\r\nconsole.log(data);\r\n            // if (data && data.length) {\r\n            if (data != null) {\r\n                setErrorData(false);\r\n               \r\n                dataReportes = data.data.map((o, index) => {\r\n                    return {\r\n\r\n                        carnet: o.estudiante.carnet, nombre: o.estudiante.nombre, evento:o.evento.nombre\r\n\r\n                    }\r\n                    \r\n\r\n                });\r\n            } else {\r\n                setErrorData(true);\r\n                setMensajeErr('No se pudo recuperar la información de los reportes.')\r\n            }\r\n       \r\n    \r\n    };\r\n     useEffect(() => {\r\n        const timeOut = setInterval(() => {\r\n            setDataReportes([...dataReporteslimpio]);\r\n            getDataReportes();\r\n            console.log(dataReportes.length);\r\n            if (dataReportes.length===0) {\r\n               dataReportes.push(unafila);\r\n               console.log(dataReportes);\r\n\r\n            }\r\n\r\n            setDataReportes([...dataReportes]);\r\n        }, 2000)\r\n        getDataReportes();\r\n        return () => clearInterval(timeOut);\r\n\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...valuesUser, [prop]: event.target.value });\r\n    };\r\n\r\n const handleBuscar = (event) => {\r\n    console.log(valuesUser.carnetbusqueda);\r\n    localStorage.setItem('busqueda',valuesUser.carnetbusqueda);\r\n    console.log(localStorage.getItem('busqueda'));\r\n    getDataReportes();\r\n}\r\n\r\n const handleLimpiar = (event) => {\r\n    console.log(valuesUser.carnetbusqueda);\r\n    localStorage.setItem('busqueda','');\r\n    console.log(localStorage.getItem('busqueda'));\r\n}\r\n\r\n    const handleClose = () => {\r\n        // console.log(value)\r\n        setValue('')\r\n        setOpen(false);\r\n        setOpenEmpresa(false);\r\n    };\r\n\r\n    const handleEnviarNotiEmpresa = (event) => {\r\n       \r\n        setOpenEmpresa(false);\r\n    };\r\nconst handleClick = (event) => {\r\n      \r\n    }\r\n    const handleEnviarNoti = (event) => {\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        detallesReporte += '<br>Comentario: ' + value;\r\n        let data = {\r\n            content: detallesReporte,\r\n            user_iduserto: datosUsu.id_usuario\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCitizenNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                //  console.log(response)\r\n                if (response.data.correct) {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente. ' +\r\n                        '\\nSe ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    // setmensajeConfirmacion('Se ha enviado una notificación al ciudadano con la actualización de su reporte exitosamente.')\r\n                } else {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente.' +\r\n                        '\\nNo se ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    setTipoAlerta('error');\r\n                }\r\n                espera();\r\n            }\r\n            );\r\n        setValue('')\r\n        setOpen(false);\r\n    };\r\n\r\n    const espera = () => {\r\n        setBanderaCambiarEstado(true);\r\n        setTimeout(() => {\r\n            setBanderaCambiarEstado(false);\r\n            setmensajeNotificacion('');\r\n            setTipoAlerta('success');\r\n        }, 5000)\r\n    }\r\n\r\n    const mostrarNotificacion = (tipo_de_cambio, idReporte, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        let nuevoEstado = '';\r\n        if (tipo_de_cambio === 1) {\r\n            setmensajeNotificacion('Ha seleccionado el reporte Registro No. ' + idReporte + ' para ser atentido. ')\r\n            nuevoEstado = 'ATENDIDO';\r\n            espera();\r\n        } else if (tipo_de_cambio === 2) {\r\n            nuevoEstado = 'PROCESADO';\r\n            let t = 'Delincuencia';\r\n            let company = 'Policía Nacional Civil'\r\n            if (tipo === 'bump') {\r\n                t = 'Bache'\r\n                company = 'Municipalidad de Mixco'\r\n            }\r\n            setEmpresaM({ idReporte: idReporte, empresa: company })\r\n            setDetallesReporte(\r\n                'Estado: ' + nuevoEstado +\r\n                '\\nRegistro No. : ' + idReporte +\r\n                '\\nTipo: ' + t +\r\n                '\\nFecha del Reporte: ' + fecha_reportado +\r\n                '\\nFecha del Problema: ' + fecha_problema +\r\n                '\\nDirección: ' + direccion +\r\n                '\\nDescripción: ' + descripcion\r\n            );\r\n            setOpenEmpresa(true);\r\n        } else if (tipo_de_cambio === 3) {\r\n            nuevoEstado = 'CERRADO'\r\n            if (usuario !== 'Anónimo') {\r\n                setDatosUsu({ id_usuario: id_usuario, usuario: usuario, idReporte: idReporte })\r\n                let t = 'Delincuencia';\r\n                if (tipo === 'bump') {\r\n                    t = 'Bache'\r\n                }\r\n                setDetallesReporte(\r\n                    'Estado: ' + nuevoEstado +\r\n                    '\\nRegistro No. : ' + idReporte +\r\n                    '\\nTipo: ' + t +\r\n                    '\\nFecha del Reporte: ' + fecha_reportado +\r\n                    '\\nFecha del Problema: ' + fecha_problema +\r\n                    '\\nDirección: ' + direccion +\r\n                    '\\nDescripción: ' + descripcion\r\n                );\r\n                setOpen(true);\r\n            } else {\r\n                setmensajeNotificacion('El reporte Registro No. ' + idReporte + ' ha sido cerrado exitosamente. ')\r\n                espera();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const metodoBtnCambiarEstado = (event, idReport, idStatus, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        const data = {\r\n            status_idstatus: idStatus + 1,\r\n        }\r\n        axios.put('https://ayd1-190621.herokuapp.com/ModifyReportStatus/' + idReport,\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.correct) {\r\n                    mostrarNotificacion(idStatus, idReport, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario);\r\n                }\r\n            }\r\n            );\r\n    }\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <div style={{ paddingLeft: '100px' }} >\r\n              <form style={{ margin: '30px' }} >\r\n                    <Titulo nombre='Reportar' />\r\n                    <TextField\r\n                        label=\"Carnet\"\r\n                        required\r\n                         onChange={handleChange('carnetbusqueda')}\r\n                         value={valuesUser.carnetbusqueda}id=\"outlined-required\"\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    \r\n                   \r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                           \r\n                            style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                            onClick={handleBuscar}\r\n                        >\r\n                             &nbsp;&nbsp;Buscar\r\n                        </Button>\r\n                <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                           \r\n                            style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                            onClick={handleLimpiar}\r\n                        >\r\n                             &nbsp;&nbsp;Limpiar busqueda\r\n                        </Button>\r\n                </form>  \r\n            </div>\r\n            <Collapse in={banderaCambiarEstado}>\r\n                <Alert variant=\"filled\" severity={tipoAlerta} width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeNotificacion}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={errorData}>\r\n                <Alert variant=\"filled\" severity='error' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeErr}\r\n                </Alert>\r\n            </Collapse>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Ciudadanos\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea defaultValue={detallesReporte} rows='10' />\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{ width: '60%' }}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={(e) => { handleEnviarNoti(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog open={openEmpresa} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n               \r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n                <DialogContent>\r\n                    \r\n                     <form style={{ margin: '10px' }} >\r\n                    <Titulo nombre='Reporte' />\r\n                    <TextField\r\n                        label=\"Carnet\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('carnetactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    \r\n                    <TextField\r\n                        label=\"Nombre\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('nombreactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n\r\n                    \r\n\r\n                    <TextField\r\n                        label=\"Curso/Proyecto\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                       \r\n                        value={localStorage.getItem('cursoactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n\r\n                    \r\n                    <TextField\r\n                        label=\"Descripción de reporte\"\r\n                        required\r\n                        multiline\r\n                        rows={4}\r\n                        rowsMax={8}\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('descripcionactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    <TextField\r\n                        label=\"Servidor\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('servidoractual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <div  style={{marginTop:'15px', width: '345px',padding:'10px',background:'#0c6efd', color:'#fff'}} >\r\n                     <h6>Solicitud atendida por el servidor {bufferServer}</h6>\r\n                    </div>\r\n                </form>\r\n                \r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={(e) => { handleEnviarNotiEmpresa(e) }} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Evento</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Nombre</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Carnet</TableCell>\r\n                        \r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {dataReportes.filter(f => (opciones !== \"\" && opciones !== null ? f.estado.toString() === opciones : true)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                           \r\n                          \r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.key}>\r\n                                      <TableCell>\r\n                                        {row.evento}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {row.nombre}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {row.carnet}\r\n                                        \r\n                                        \r\n                                    </TableCell>\r\n                                    \r\n                                </TableRow>\r\n                            );\r\n                        \r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            \r\n        </Paper>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport 'date-fns';\r\nimport { Label } from 'reactstrap';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { Typography } from '@material-ui/core';\r\nimport '@rmwc/typography/styles';\r\nimport Titulo from '../../components/Textos/Titulo';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\n// import GridList from '@material-ui/core/GridList';\r\n// import GridListTile from '@material-ui/core/GridListTile';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    contenedor: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    alinearContenedor: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    table: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: '#393E46 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 940,\r\n    },\r\n    subtitulos: {\r\n        fontSize: '18px',\r\n        fontWeight: 'bolder',\r\n    },\r\n    text: {\r\n        fontSize: '19px',\r\n        fontFamily: 'Calibri'\r\n    },\r\n    root2: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        flexWrap: 'nowrap',\r\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n        transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n        color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n        background:\r\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n    inactive: {\r\n        pointerEvents: 'none', // pointer-events not supported below IE11\r\n        position: 'fixed'\r\n    }\r\n\r\n}));\r\n\r\n\r\nexport default function Visualizar() {\r\n    const classes = useStyles();\r\n    let [dataReportes, setDataReportes] = useState([]);\r\n    let [currentServer, setCurrentServer] = useState('');\r\n    let [bufferServer, setBufferServer] = useState('');\r\n    let [errorData, setErrorData] = useState(false);\r\n    let [mensajeErr, setMensajeErr] = useState('');\r\n    let [banderaCambiarEstado, setBanderaCambiarEstado] = useState(false);\r\n    let [mensajeNotificacion, setmensajeNotificacion] = useState(false);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    let [detallesReporte, setDetallesReporte] = useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openEmpresa, setOpenEmpresa] = React.useState(false);\r\n    const [value, setValue] = React.useState('');\r\n    let [carnetbusqueda, setCarnet] = React.useState('');\r\n    let [tipoAlerta, setTipoAlerta] = useState('success');\r\n    let [opciones, setOpciones] = useState('');\r\n    let [datosUsu, setDatosUsu] = useState({\r\n        id_usuario: '',\r\n        usuario: '',\r\n        idReporte: '',\r\n    });\r\nconst [valuesUser, setValues] = useState({\r\n        carnetbusqueda:''\r\n    });\r\nconst unafila = {\r\n            key: '0',\r\n            carnet: '0',\r\n            cuerpo: '',\r\n            estudiante: '',\r\n            curso:'',\r\n            servidor:''\r\n        }\r\n        const dataReporteslimpio=[];\r\n        dataReporteslimpio.push(unafila);\r\n    let [empresaM, setEmpresaM] = useState({\r\n        idReporte: '',\r\n        empresa: ''\r\n    });\r\n\r\nconst enviarArchivo = async(event, carnet, nombre, descripcion, servidor, curso) => {\r\n        \r\n        localStorage.setItem('carnetactual',carnet);\r\n        localStorage.setItem('nombreactual',nombre);\r\n        localStorage.setItem('descripcionactual',descripcion);\r\n        localStorage.setItem('servidoractual',servidor);\r\nlocalStorage.setItem('cursoactual',curso);\r\n         setOpenEmpresa(true);\r\n\r\n        \r\n    };\r\n\r\n\r\n    const getDataReportes = async () => {\r\n\r\n        try {\r\nif(localStorage.getItem('busqueda')!=null){\r\n const { data } = await axios.get(\r\n                'http://35.202.67.211:4000/reporte');\r\n\r\n            // if (data && data.length) {\r\n            if (data != null) {\r\n                setErrorData(false);\r\n               \r\n                dataReportes = data.data.map((o, index) => {\r\n                    if (o.carnet==localStorage.getItem('busqueda')) {\r\n                    return {\r\n\r\n                        key: o.id, carnet: o.carnet, cuerpo: o.cuerpo, estudiante: o.estudiante, curso: o.cursoProyecto, servidor:o.servidor\r\n\r\n                    }}\r\n                    else{\r\n                        return unafila;\r\n                    }\r\n\r\n                });\r\n            } else {\r\n                setErrorData(true);\r\n                setMensajeErr('No se pudo recuperar la información de los reportes.')\r\n            }\r\n       }\r\n       if(localStorage.getItem('busqueda')===''){\r\n        console.log('entre a busquedaddddd')\r\n        const { data } = await axios.get(\r\n                'http://35.202.67.211:4000/reporte');\r\n\r\n        console.log(unafila)\r\n            // if (data && data.length) {\r\n                setCurrentServer(data.servidor);\r\n                console.log(data);\r\n            if (data != null) {\r\n                setErrorData(false);\r\n                dataReportes = data.data.map((o, index) => {\r\n                    \r\n                    return {\r\n\r\n                        key: o.id, carnet: o.carnet, cuerpo: o.cuerpo, estudiante: o.estudiante, curso: o.cursoProyecto, servidor:o.servidor\r\n\r\n                    }\r\n                });\r\n            } else {\r\n                setErrorData(true);\r\n                setMensajeErr('No se pudo recuperar la información de los reportes.')\r\n            }\r\n\r\n       }\r\n\r\n\r\n\r\n }\r\n        catch (err) {\r\n            setErrorData(true);\r\n            setMensajeErr('')\r\n            setDataReportes([]);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        const timeOut = setInterval(() => {\r\n            setDataReportes([...dataReporteslimpio]);\r\n            getDataReportes();\r\n            console.log(dataReportes.length);\r\n            if (dataReportes.length===0) {\r\n               dataReportes.push(unafila);\r\n               console.log(dataReportes);\r\n\r\n            }\r\n\r\n            setDataReportes([...dataReportes]);\r\n        }, 2000)\r\n        getDataReportes();\r\n        return () => clearInterval(timeOut);\r\n\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...valuesUser, [prop]: event.target.value });\r\n    };\r\n\r\n const handleBuscar = (event) => {\r\n    console.log(valuesUser.carnetbusqueda);\r\n    localStorage.setItem('busqueda',valuesUser.carnetbusqueda);\r\n    console.log(localStorage.getItem('busqueda'));\r\n}\r\n\r\n const handleLimpiar = (event) => {\r\n    console.log(valuesUser.carnetbusqueda);\r\n    localStorage.setItem('busqueda','');\r\n    console.log(localStorage.getItem('busqueda'));\r\n}\r\n\r\n    const handleClose = () => {\r\n        // console.log(value)\r\n        setValue('')\r\n        setOpen(false);\r\n        setOpenEmpresa(false);\r\n    };\r\n\r\n    const handleEnviarNotiEmpresa = (event) => {\r\n       \r\n        setOpenEmpresa(false);\r\n    };\r\nconst handleClick = (event) => {\r\n      \r\n    }\r\n    const handleEnviarNoti = (event) => {\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        detallesReporte += '<br>Comentario: ' + value;\r\n        let data = {\r\n            content: detallesReporte,\r\n            user_iduserto: datosUsu.id_usuario\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCitizenNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                //  console.log(response)\r\n                if (response.data.correct) {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente. ' +\r\n                        '\\nSe ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    // setmensajeConfirmacion('Se ha enviado una notificación al ciudadano con la actualización de su reporte exitosamente.')\r\n                } else {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente.' +\r\n                        '\\nNo se ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    setTipoAlerta('error');\r\n                }\r\n                espera();\r\n            }\r\n            );\r\n        setValue('')\r\n        setOpen(false);\r\n    };\r\n\r\n    const espera = () => {\r\n        setBanderaCambiarEstado(true);\r\n        setTimeout(() => {\r\n            setBanderaCambiarEstado(false);\r\n            setmensajeNotificacion('');\r\n            setTipoAlerta('success');\r\n        }, 5000)\r\n    }\r\n\r\n    const mostrarNotificacion = (tipo_de_cambio, idReporte, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        let nuevoEstado = '';\r\n        if (tipo_de_cambio === 1) {\r\n            setmensajeNotificacion('Ha seleccionado el reporte Registro No. ' + idReporte + ' para ser atentido. ')\r\n            nuevoEstado = 'ATENDIDO';\r\n            espera();\r\n        } else if (tipo_de_cambio === 2) {\r\n            nuevoEstado = 'PROCESADO';\r\n            let t = 'Delincuencia';\r\n            let company = 'Policía Nacional Civil'\r\n            if (tipo === 'bump') {\r\n                t = 'Bache'\r\n                company = 'Municipalidad de Mixco'\r\n            }\r\n            setEmpresaM({ idReporte: idReporte, empresa: company })\r\n            setDetallesReporte(\r\n                'Estado: ' + nuevoEstado +\r\n                '\\nRegistro No. : ' + idReporte +\r\n                '\\nTipo: ' + t +\r\n                '\\nFecha del Reporte: ' + fecha_reportado +\r\n                '\\nFecha del Problema: ' + fecha_problema +\r\n                '\\nDirección: ' + direccion +\r\n                '\\nDescripción: ' + descripcion\r\n            );\r\n            setOpenEmpresa(true);\r\n        } else if (tipo_de_cambio === 3) {\r\n            nuevoEstado = 'CERRADO'\r\n            if (usuario !== 'Anónimo') {\r\n                setDatosUsu({ id_usuario: id_usuario, usuario: usuario, idReporte: idReporte })\r\n                let t = 'Delincuencia';\r\n                if (tipo === 'bump') {\r\n                    t = 'Bache'\r\n                }\r\n                setDetallesReporte(\r\n                    'Estado: ' + nuevoEstado +\r\n                    '\\nRegistro No. : ' + idReporte +\r\n                    '\\nTipo: ' + t +\r\n                    '\\nFecha del Reporte: ' + fecha_reportado +\r\n                    '\\nFecha del Problema: ' + fecha_problema +\r\n                    '\\nDirección: ' + direccion +\r\n                    '\\nDescripción: ' + descripcion\r\n                );\r\n                setOpen(true);\r\n            } else {\r\n                setmensajeNotificacion('El reporte Registro No. ' + idReporte + ' ha sido cerrado exitosamente. ')\r\n                espera();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const metodoBtnCambiarEstado = (event, idReport, idStatus, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        const data = {\r\n            status_idstatus: idStatus + 1,\r\n        }\r\n        axios.put('https://ayd1-190621.herokuapp.com/ModifyReportStatus/' + idReport,\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.correct) {\r\n                    mostrarNotificacion(idStatus, idReport, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario);\r\n                }\r\n            }\r\n            );\r\n    }\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <div style={{ paddingLeft: '100px' }} >\r\n              <form style={{ margin: '30px' }} >\r\n                    <Titulo nombre='Reportar' />\r\n                    <TextField\r\n                        label=\"Carnet\"\r\n                        required\r\n                         onChange={handleChange('carnetbusqueda')}\r\n                         value={valuesUser.carnetbusqueda}\r\n                        id=\"outlined-required\"\r\n                        variant=\"outlined\"\r\n                        style={{ width: '235px' }}\r\n                    />\r\n\r\n                    \r\n                   \r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                           \r\n                            style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                            onClick={handleBuscar}\r\n                        >\r\n                             &nbsp;&nbsp;Buscar\r\n                        </Button>\r\n                <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                           \r\n                            style={{ color: '#FFFFFF', backgroundColor: '#161557' }}\r\n                            onClick={handleLimpiar}\r\n                        >\r\n                             &nbsp;&nbsp;Limpiar busqueda\r\n                        </Button>\r\n                </form>  \r\n            </div>\r\n            <Collapse in={banderaCambiarEstado}>\r\n                <Alert variant=\"filled\" severity={tipoAlerta} width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeNotificacion}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={errorData}>\r\n                <Alert variant=\"filled\" severity='error' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeErr}\r\n                </Alert>\r\n            </Collapse>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Ciudadanos\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea defaultValue={detallesReporte} rows='10' />\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{ width: '60%' }}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={(e) => { handleEnviarNoti(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog open={openEmpresa} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n               \r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n                <DialogContent>\r\n                    \r\n                     <form style={{ margin: '10px' }} >\r\n                    <Titulo nombre='Reporte' />\r\n                    <TextField\r\n                        label=\"Carnet\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('carnetactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    \r\n                    <TextField\r\n                        label=\"Nombre\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('nombreactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n\r\n                    \r\n\r\n                    <TextField\r\n                        label=\"Curso/Proyecto\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                       \r\n                        value={localStorage.getItem('cursoactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n\r\n                    \r\n                    <TextField\r\n                        label=\"Descripción de reporte\"\r\n                        required\r\n                        multiline\r\n                        rows={4}\r\n                        rowsMax={8}\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('descripcionactual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    <TextField\r\n                        label=\"Servidor\"\r\n                        required\r\n                        id=\"outlined-required\"\r\n                        value={localStorage.getItem('servidoractual')}\r\n                        variant=\"outlined\"\r\n                        style={{ width: '345px', pointerEvents:'none' }}\r\n                    />\r\n                    <br />\r\n                    <div  style={{marginTop:'15px', width: '345px',padding:'10px',background:'#0c6efd', color:'#fff'}} >\r\n                     <h6>Solicitud atendida por el servidor {bufferServer}</h6>\r\n                    </div>\r\n                </form>\r\n                \r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={(e) => { handleEnviarNotiEmpresa(e) }} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Id</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Carnet</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Nombre</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Proyecto</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Servidor</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Acciones</TableCell>\r\n                        \r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {dataReportes.filter(f => (opciones !== \"\" && opciones !== null ? f.estado.toString() === opciones : true)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                           \r\n                            if(row.carnet != '0'){\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.key}>\r\n                                    <TableCell  align=\"center\">\r\n                                        {row.key}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {row.carnet}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {row.estudiante}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {row.curso}\r\n                                        \r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.servidor}\r\n                                       \r\n\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Button\r\n                                                                                    variant=\"contained\"\r\n                                                                                    size=\"large\"\r\n                                                                                    onClick={(e) => { setBufferServer(currentServer); enviarArchivo(e, row.carnet, row.estudiante, row.cuerpo, row.servidor, row.curso) }}\r\n                                                                                    style={{ minWidth: '0', width: '170px', padding: '0', backgroundColor: '#fff', alignItems: 'center', margin: '0 0 0 7px' }}\r\n                                                                                > <Typography>Ver reporte</Typography>\r\n                                                                                 </Button>\r\n                                       \r\n\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        }\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <div  style={{marginTop:'50px',padding:'10px 15px',background:'#0c6efd', color:'#fff'}} >\r\n                     <h4>Solicitud atendida por el servidor {currentServer}</h4>\r\n            </div>\r\n        </Paper>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { BrowserRouter as Router, Link} from 'react-router-dom';\r\nimport {\r\n    ListItem,\r\n    ListItemText\r\n} from \"@rmwc/list\";\r\n\r\nimport {\r\n    Typography\r\n} from \"@rmwc/typography\";\r\nimport '@rmwc/typography/styles';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    link: {\r\n        textDecoration: 'none',\r\n        color: \"#f44336\",\r\n        fontWeight: 'bold',\r\n        \r\n        // padding: '-20px 1px',\r\n        wordWrap: 'normal',\r\n        display: 'inline-block'\r\n    },\r\n    margen: {\r\n        fontSize: '25px',\r\n        padding: '24px',\r\n        wordWrap: 'normal',\r\n        display: 'inline-block',\r\n        color: '#161557'\r\n    }\r\n}));\r\n\r\nexport default function Links(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Link to={props.path} className={classes.link}>\r\n            <ListItem >\r\n                <ListItemText>\r\n                    <Typography className={classes.margen} use=\"headline6\">{props.texto}</Typography>\r\n                </ListItemText>\r\n            </ListItem>\r\n        </Link>\r\n    );\r\n}","import Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: \"#0B78F4\",\r\n        color: \"#FFFFFF\",\r\n        fontWeight: \"bold\",\r\n        font: \"Verdana\",\r\n        left: '18%',\r\n    },\r\n    centrarTexto: {\r\n        textAlign: 'center',\r\n    },\r\n    centrarContenido: {\r\n        textAlign: 'center',\r\n    },\r\n    bloque: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n\r\n    },\r\n    alinearAlerta: {\r\n        display: 'inline-block',\r\n        width: '50%'\r\n    },\r\n    table: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: '#393E46 1px solid',\r\n        backgroundColor: '#FFF',\r\n    }\r\n}));\r\nexport default function AcercaDe() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.bloque}>\r\n            <p style={{ fontSize: '35px' }}>Mr. Soluciones AyD</p>\r\n            <br/>\r\n            <div className={classes.table}>\r\n                <TableContainer >\r\n                    <Table size=\"small\" aria-label=\"a dense table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Carné</TableCell>\r\n                                <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Nombre</TableCell>\r\n                                <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Correo</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow >\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }} >201505550</TableCell>\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }}>José Gonzalo Hernández Morales</TableCell>\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }}>josegonzahm@gmail.com</TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }} >201612408</TableCell>\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }}>Katherine Lisseth Sánchez Girón</TableCell>\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }}>sanchezkathy29@gmail.com</TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }} >201708850</TableCell>\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }}>Marco Antonio Reyes García</TableCell>\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }}>marcoreyesinfoemiliani@gmail.com</TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }} >201800984</TableCell>\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }}>Alex Fernando Méndez Lópezn</TableCell>\r\n                                <TableCell align=\"center\" style={{ fontSize: '15px', color: '#393E46' }}>201800984@ingenieria.usac.edu.gt</TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport 'date-fns';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport '@rmwc/typography/styles';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Alert from '@material-ui/lab/Alert';\r\n// import Collapse from '@material-ui/core/Collapse';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nconst useStyles = makeStyles((theme) => ({\r\n    contenedor: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    alinearContenedor: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    table: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: '#393E46 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 940,\r\n    },\r\n    subtitulos: {\r\n        fontSize: '18px',\r\n        fontWeight: 'bolder',\r\n    },\r\n    text: {\r\n        fontSize: '19px',\r\n        fontFamily: 'Calibri'\r\n    },\r\n    root2: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        flexWrap: 'nowrap',\r\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n        transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n        color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n        background:\r\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n    inactive: {\r\n        pointerEvents: 'none', // pointer-events not supported below IE11\r\n        position: 'fixed'\r\n    }\r\n\r\n}));\r\n\r\n\r\nexport default function Reportes() {\r\n    const classes = useStyles();\r\n    let [dataReportes, setDataReportes] = useState([]);\r\n    let [errorData, setErrorData] = useState(false);\r\n    let [mensajeErr, setMensajeErr] = useState('');\r\n    let [banderaCambiarEstado, setBanderaCambiarEstado] = useState(false);\r\n    let [mensajeNotificacion, setmensajeNotificacion] = useState(false);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    let [detallesReporte, setDetallesReporte] = useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openEmpresa, setOpenEmpresa] = React.useState(false);\r\n    const [value, setValue] = React.useState('');\r\n    let [tipoAlerta, setTipoAlerta] = useState('success');\r\n    let [cantRows, setCantRows] = useState(1);\r\n    let [datosUsu, setDatosUsu] = useState({\r\n        id_usuario: '',\r\n        usuario: '',\r\n        idReporte: '',\r\n    });\r\n\r\n    let [empresaM, setEmpresaM] = useState({\r\n        idReporte: '',\r\n        empresa: '',\r\n        email: '',\r\n        asunto: '',\r\n    });\r\n\r\n    let [opciones, setOpciones] = useState('');\r\n    let [infoReporte, setInfoReporte] = useState(\r\n        {\r\n            address: '',\r\n            dateofreport: '',\r\n            dateofproblem: '',\r\n            description: '',\r\n            typereport: '',\r\n            images: []\r\n        }\r\n    )\r\n\r\n    const getDataReportes = async () => {\r\n        try {\r\n            const { data } = await axios.get(\r\n                'https://ayd1-190621.herokuapp.com/ReportsEmployee',\r\n                {\r\n                    headers: {\r\n                        authorization: localStorage.getItem('token')\r\n                    }\r\n                });\r\n            // if (data && data.length) {\r\n            if (data.correct) {\r\n                setErrorData(false);\r\n                // console.log('Cantidad de reportes: ' + data.data.length)\r\n                dataReportes = data.data.map((o, index) => {\r\n                    let usu = 'Anónimo';\r\n                    if (o.citizen !== null) {\r\n                        usu = o.citizen;\r\n                    }\r\n                    // 2021-06-20T05:58:53.000Z\r\n                    // let FR = o.dateofreport;\r\n                    // let FR = new Date(Date.parse(o.dateofreport));\r\n                    // FR = FR.getDate().toString() + \"/\" + (FR.getMonth() + 1) + \"/\" + FR.getFullYear().toString() + ' - ' +\r\n                    //     (FR.getHours()).toString() + ':' + FR.getMinutes().toString() + ':' + FR.getSeconds().toString()\r\n                    // let FP = new Date(Date.parse(o.dateofproblem));\r\n                    // FP = FP.getDate().toString() + \"/\" + (FP.getMonth() + 1) + \"/\" + FP.getFullYear().toString() + ' - ' +\r\n                    //     (FP.getHours()).toString() + ':' + FP.getMinutes().toString() + ':' + FP.getSeconds().toString()\r\n                    return {\r\n                        key: index, id_reporte: o.idreport, tipo_reporte: o.typereport,\r\n                        direccion: o.address, fecha_reportado: o.dateofreport, fecha_problema: o.dateofproblem,\r\n                        descripcion: o.description, usuario_reporte: usu, id_usuario: o.iduser,\r\n                        imagenes: o.images, estado: o.idstatus\r\n                    }\r\n                });\r\n            } else {\r\n                setErrorData(true);\r\n                setMensajeErr('No se pudo recuperar la información de los reportes.')\r\n            }\r\n        }\r\n        catch (err) {\r\n            setErrorData(true);\r\n            setMensajeErr('No se pudo conectar al servidor.')\r\n            setDataReportes([]);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        const timeOut = setInterval(() => {\r\n            getDataReportes();\r\n            setDataReportes([...dataReportes]);\r\n        }, 2000)\r\n        getDataReportes();\r\n        return () => clearInterval(timeOut);\r\n\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setValue('')\r\n        setOpen(false);\r\n        setOpenEmpresa(false);\r\n    };\r\n\r\n    let [tiempoEspera, setTiempoEspera] = useState();\r\n\r\n\r\n    const handleEnviarNotiEmpresa = (event) => {\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        let msj1 = 'El reporte Registro No. ' + empresaM.idReporte + ' ha sido procesado exitosamente. ';\r\n        // let [msj, setMsj] = useState('El reporte Registro No. ' + empresaM.idReporte + ' ha sido procesado exitosamente. ')\r\n        // detallesReporte += '\\nComentario: ' + value;\r\n\r\n        let data = {\r\n            content: detallesReporte + '\\nComentario: ' + value,\r\n            company: empresaM.empresa\r\n        }\r\n        setCantRows(3);\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCompanyNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n\r\n                if (response.data.correct) {\r\n                    msj1 = msj1.concat('\\nSe ha enviado una notificación a: ' + empresaM.empresa + '.')\r\n                } else {\r\n                    msj1 = msj1.concat('\\nNo se ha enviado una notificación a: ' + empresaM.empresa + '.')\r\n                    setTipoAlerta('error');\r\n                }\r\n\r\n            }\r\n            );\r\n        let mailData = {\r\n            maildata: {\r\n                commentary: value,\r\n                subject: empresaM.asunto,\r\n                to: empresaM.email\r\n            },\r\n            report: {\r\n                // infoReporte\r\n                address: infoReporte.address,\r\n                dateofreport: infoReporte.dateofreport,\r\n                dateofproblem: infoReporte.dateofproblem,\r\n                description: infoReporte.description,\r\n                typereport: infoReporte.typereport,\r\n                images: infoReporte.images\r\n            }\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/SendEmail/',\r\n            mailData,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.status) {\r\n                    msj1 = msj1.concat('\\nSe ha enviado un E-mail a: ' + empresaM.email + '.')\r\n                } else {\r\n                    msj1 = msj1.concat('\\nNo se ha enviado un E-mail a: ' + empresaM.email + '.')\r\n                    setTipoAlerta('error');\r\n                }\r\n                setmensajeNotificacion(msj1);\r\n                espera();\r\n                setValue('')\r\n                setOpenEmpresa(false);\r\n            }\r\n            );\r\n\r\n\r\n\r\n    };\r\n\r\n    const handleEnviarNoti = (event) => {\r\n        setCantRows(1);\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        detallesReporte += '\\nComentario: ' + value;\r\n        let data = {\r\n            content: detallesReporte,\r\n            user_iduserto: datosUsu.id_usuario\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCitizenNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                //  console.log(response)\r\n                if (response.data.correct) {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente. ' +\r\n                        '\\nSe ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    // setmensajeConfirmacion('Se ha enviado una notificación al ciudadano con la actualización de su reporte exitosamente.')\r\n                } else {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente.' +\r\n                        '\\nNo se ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    setTipoAlerta('error');\r\n                }\r\n                espera();\r\n            }\r\n            );\r\n        setValue('')\r\n        setOpen(false);\r\n    };\r\n\r\n    const espera = () => {\r\n        setBanderaCambiarEstado(true);\r\n        setTimeout(() => {\r\n            setBanderaCambiarEstado(false);\r\n            setmensajeNotificacion('');\r\n            setTipoAlerta('success');\r\n        }, tiempoEspera)\r\n    }\r\n\r\n    const mostrarNotificacion = (tipo_de_cambio, idReporte, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario, imagenes) => {\r\n        let nuevoEstado = '';\r\n        if (tipo_de_cambio === 1) {\r\n            setTiempoEspera(3000);\r\n            setCantRows(2);\r\n            setmensajeNotificacion('Ha seleccionado el reporte Registro No. ' + idReporte + ' para ser atentido. ')\r\n            nuevoEstado = 'ATENDIDO';\r\n            espera();\r\n        } else if (tipo_de_cambio === 2) {\r\n            setTiempoEspera(8000);\r\n            nuevoEstado = 'PROCESADO';\r\n            let t = 'Delincuencia';\r\n            let company = 'Policía Municipal Mixco'\r\n            let emailC = 'policiamixcoapp@gmail.com'\r\n            let asuntoC = 'Reporte de Delincuencia'\r\n            if (tipo === 'bump') {\r\n                t = 'Bache'\r\n                company = 'Municipalidad de Mixco'\r\n                emailC = 'infravialmixcoapp@gmail.com'\r\n                asuntoC = 'Reporte de bacheo'\r\n            }\r\n            setEmpresaM({ idReporte: idReporte, empresa: company, email: emailC, asunto: asuntoC })\r\n            setInfoReporte({\r\n                address: direccion,\r\n                dateofreport: fecha_reportado,\r\n                dateofproblem: fecha_problema,\r\n                description: descripcion,\r\n                typereport: t,\r\n                images: imagenes\r\n            })\r\n            setDetallesReporte(\r\n                'Estado: ' + nuevoEstado +\r\n                '\\nRegistro No. : ' + idReporte +\r\n                '\\nTipo: ' + t +\r\n                '\\nFecha del Reporte: ' + fecha_reportado +\r\n                '\\nFecha del Problema: ' + fecha_problema +\r\n                '\\nDirección: ' + direccion +\r\n                '\\nDescripción: ' + descripcion\r\n            );\r\n            setOpenEmpresa(true);\r\n        } else if (tipo_de_cambio === 3) {\r\n            nuevoEstado = 'CERRADO'\r\n            setCantRows(1);\r\n            setTiempoEspera(3000);\r\n            if (usuario !== 'Anónimo') {\r\n                setDatosUsu({ id_usuario: id_usuario, usuario: usuario, idReporte: idReporte })\r\n                let t = 'Delincuencia';\r\n                if (tipo === 'bump') {\r\n                    t = 'Bache'\r\n                }\r\n                setDetallesReporte(\r\n                    'Estado: ' + nuevoEstado +\r\n                    '\\nRegistro No. : ' + idReporte +\r\n                    '\\nTipo: ' + t +\r\n                    '\\nFecha del Reporte: ' + fecha_reportado +\r\n                    '\\nFecha del Problema: ' + fecha_problema +\r\n                    '\\nDirección: ' + direccion +\r\n                    '\\nDescripción: ' + descripcion\r\n                );\r\n                setOpen(true);\r\n            } else {\r\n                setmensajeNotificacion('El reporte Registro No. ' + idReporte + ' ha sido cerrado exitosamente. ')\r\n                espera();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const metodoBtnCambiarEstado = (event, idReport, idStatus, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario, imagenes) => {\r\n        const data = {\r\n            status_idstatus: idStatus + 1,\r\n        }\r\n        axios.put('https://ayd1-190621.herokuapp.com/ModifyReportStatus/' + idReport,\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.correct) {\r\n                    mostrarNotificacion(idStatus, idReport, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario, imagenes);\r\n                }\r\n            }\r\n            );\r\n    }\r\n\r\n    const vertical = 'top';\r\n    const horizontal = 'center';\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <div style={{ paddingLeft: '100px' }} >\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                    <InputLabel id=\"demo-simple-select-label\">Estado</InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={opciones}\r\n                        onChange={(valor) => { setOpciones(valor.target.value) }}\r\n                    >\r\n                        <MenuItem value={'1'}>Atender</MenuItem>\r\n                        <MenuItem value={'2'}>Procesar</MenuItem>\r\n                        <MenuItem value={'3'}>Cerrar</MenuItem>\r\n                        <MenuItem value={''}>Todos</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Ciudadanos\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea readOnly=\"readOnly\" style={{ width: '400px' }} defaultValue={detallesReporte} rows='10' />\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{ width: '60%' }}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={(e) => { handleEnviarNoti(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog open={openEmpresa} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Empresas\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea readOnly=\"readOnly\" style={{ width: '400px' }} defaultValue={detallesReporte} rows='10' />\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{ width: '60%' }}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={(e) => { handleEnviarNotiEmpresa(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Snackbar anchorOrigin={{ vertical, horizontal }} open={banderaCambiarEstado} autoHideDuration={tiempoEspera} >\r\n                <Alert color=\"warning\" variant=\"filled\" severity={tipoAlerta} width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    <textarea style={{ width: '600px', backgroundColor: '#ff9800', borderColor: '#ff9800', color: '#FFF' }} rows={cantRows} defaultValue={mensajeNotificacion} />\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar anchorOrigin={{ vertical, horizontal }} open={errorData} autoHideDuration={3000} >\r\n                <Alert variant=\"filled\" severity='error' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    <textarea style={{ width: '600px', backgroundColor: '#ff9800', borderColor: '#ff9800', color: '#FFF' }} defaultValue={mensajeErr} />\r\n                </Alert>\r\n            </Snackbar>\r\n            <TableContainer className={classes.container}>\r\n                {/* <Collapse in={banderaCambiarEstado}>\r\n                <Alert variant=\"filled\" severity={tipoAlerta} width=\"10px\" style={{ top: '200', right: '20', position: 'absolute', left: 'auto', fontSize: '19px' }}>\r\n                    <textarea style={{ width: '600px', backgroundColor: '#4caf50', borderColor: '#4caf50', color: '#FFF' }} rows={cantRows} defaultValue={mensajeNotificacion} />\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={errorData}>\r\n                <Alert variant=\"filled\" severity='error' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    <textarea style={{ width: '600px', backgroundColor: '#4caf50', borderColor: '#4caf50', color: '#FFF' }} defaultValue={mensajeErr} />\r\n                </Alert>\r\n            </Collapse> */}\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>No.</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Reporte</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Acción</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            dataReportes.filter(f => (opciones !== \"\" && opciones !== null ? f.estado.toString() === opciones : true)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                                return (\r\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.key}>\r\n                                        <TableCell key={'K1' + row.key} align=\"center\">\r\n                                            {row.key + 1}\r\n                                        </TableCell>\r\n                                        <TableCell key={'K2' + row.key}>\r\n                                            {/* INICIO TABLA CON DETALLES DE REPORTE */}\r\n                                            <TableContainer>\r\n                                                <Table className={classes.table} aria-label=\"customized table\">\r\n                                                    <TableBody>\r\n                                                        {/* style={{border:'1px solid black', padding: '10px'}} */}\r\n                                                        <TableRow>\r\n                                                            <TableCell  >\r\n                                                                <label className={classes.subtitulos}>Registro:</label> &nbsp;  <label className={classes.text}>{row.id_reporte}</label>\r\n                                                            </TableCell>\r\n                                                            <TableCell colSpan='2' >\r\n                                                                <label className={classes.subtitulos}>Usuario: </label>&nbsp;  <label className={classes.text}>{row.usuario_reporte}</label>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                        <TableRow>\r\n                                                            <TableCell >\r\n                                                                <label className={classes.subtitulos}>Tipo:</label> &nbsp;  <label className={classes.text}>\r\n                                                                    {row.tipo_reporte === 'bump' ? 'Bacheo' : 'Delincuencia'}</label>\r\n                                                            </TableCell>\r\n                                                            <TableCell >\r\n                                                                <label className={classes.subtitulos}>Fecha del Reporte:</label> &nbsp;\r\n                                                                <label className={classes.text}>\r\n                                                                    {\r\n                                                                        (\r\n                                                                            () => {\r\n                                                                                let fecha_tmp = '';\r\n                                                                                for (let j = 0; j < row.fecha_reportado.length; j++) {\r\n                                                                                    if (row.fecha_reportado[j] === '.') {\r\n                                                                                        break;\r\n                                                                                    }\r\n                                                                                    if (row.fecha_reportado[j] === 'T') {\r\n                                                                                        fecha_tmp += ' H:';\r\n                                                                                        continue;\r\n                                                                                    }\r\n                                                                                    fecha_tmp += row.fecha_reportado[j];\r\n                                                                                }\r\n                                                                                return fecha_tmp\r\n                                                                            }\r\n                                                                        )()\r\n                                                                    }\r\n                                                                </label>\r\n                                                            </TableCell>\r\n                                                            <TableCell >\r\n                                                                <label className={classes.subtitulos}>Fecha del Suceso: </label>&nbsp;\r\n                                                                <label className={classes.text}>\r\n                                                                    {\r\n                                                                        (\r\n                                                                            () => {\r\n                                                                                let fecha_tmp = '';\r\n                                                                                for (let j = 0; j < row.fecha_problema.length; j++) {\r\n                                                                                    if (row.fecha_reportado[j] === '.') {\r\n                                                                                        break;\r\n                                                                                    }\r\n                                                                                    if (row.fecha_reportado[j] === 'T') {\r\n                                                                                        fecha_tmp += ' H:';\r\n                                                                                        continue;\r\n                                                                                    }\r\n                                                                                    fecha_tmp += row.fecha_reportado[j];\r\n                                                                                }\r\n                                                                                return fecha_tmp\r\n                                                                            }\r\n                                                                        )()\r\n                                                                    }\r\n                                                                </label>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                        <TableRow>\r\n                                                            <TableCell colSpan=\"3\" >\r\n                                                                <label className={classes.subtitulos}>Dirección: </label>&nbsp;  <label className={classes.text}>{row.direccion}</label>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                        <TableRow>\r\n                                                            <TableCell colSpan=\"3\" >\r\n                                                                <label className={classes.subtitulos}>Descripción: </label>&nbsp;  <label className={classes.text}>{row.descripcion}</label>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                        <TableRow>\r\n                                                            <TableCell colSpan=\"3\" >\r\n                                                                <label className={classes.subtitulos}>Imágenes:</label>\r\n                                                                <div className={classes.root2}>\r\n                                                                    <GridList key={'GL' + row.key} className={classes.gridList} cols={2.5}>\r\n                                                                        {row.imagenes.map((tile, indice) => (\r\n                                                                            <GridListTile key={'G' + indice}>\r\n                                                                                <img src={tile} alt={'tit' + indice} />\r\n                                                                            </GridListTile>\r\n                                                                        ))}\r\n                                                                    </GridList>\r\n                                                                </div>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    </TableBody>\r\n                                                </Table>\r\n                                            </TableContainer>\r\n                                        </TableCell>\r\n                                        <TableCell key={'K3' + row.key} align=\"center\">\r\n                                            {\r\n                                                (\r\n                                                    () => {\r\n                                                        if (row.estado === 1) {\r\n                                                            return (\r\n                                                                <Button\r\n                                                                    variant=\"contained\"\r\n                                                                    size=\"large\"\r\n                                                                    style={{ color: '#FFFFFF', backgroundColor: '#578825' }}\r\n                                                                    onClick={(e) => metodoBtnCambiarEstado(e, row.id_reporte, row.estado, row.tipo_reporte, row.direccion, row.fecha_reportado, row.fecha_problema, row.descripcion, row.usuario_reporte, row.id_usuario, row.imagenes)}\r\n                                                                >\r\n                                                                    Atender\r\n                                                                </Button>)\r\n                                                        } else if (row.estado === 2) {\r\n                                                            return (\r\n                                                                <Button\r\n                                                                    variant=\"contained\"\r\n                                                                    size=\"large\"\r\n                                                                    style={{ color: '#000', backgroundColor: '#D8C511' }}\r\n                                                                    onClick={(e) => metodoBtnCambiarEstado(e, row.id_reporte, row.estado, row.tipo_reporte, row.direccion, row.fecha_reportado, row.fecha_problema, row.descripcion, row.usuario_reporte, row.id_usuario, row.imagenes)}\r\n                                                                >\r\n                                                                    Procesar\r\n                                                                </Button>)\r\n                                                        } else if (row.estado === 3) {\r\n                                                            return (\r\n                                                                <Button\r\n                                                                    variant=\"contained\"\r\n                                                                    size=\"large\"\r\n                                                                    style={{ color: '#FFF', backgroundColor: '#D84211' }}\r\n                                                                    onClick={(e) => metodoBtnCambiarEstado(e, row.id_reporte, row.estado, row.tipo_reporte, row.direccion, row.fecha_reportado, row.fecha_problema, row.descripcion, row.usuario_reporte, row.id_usuario, row.imagenes)}\r\n                                                                >\r\n                                                                    Cerrar\r\n                                                                </Button>)\r\n                                                        }\r\n                                                    }\r\n                                                )()\r\n                                            }\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                            })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={dataReportes.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport 'date-fns';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport '@rmwc/typography/styles';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\n// import GridList from '@material-ui/core/GridList';\r\n// import GridListTile from '@material-ui/core/GridListTile';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    contenedor: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    alinearContenedor: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    table: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: '#393E46 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 940,\r\n    },\r\n    subtitulos: {\r\n        fontSize: '18px',\r\n        fontWeight: 'bolder',\r\n    },\r\n    text: {\r\n        fontSize: '19px',\r\n        fontFamily: 'Calibri'\r\n    },\r\n    root2: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        flexWrap: 'nowrap',\r\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n        transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n        color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n        background:\r\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n    inactive: {\r\n        pointerEvents: 'none', // pointer-events not supported below IE11\r\n        position: 'fixed'\r\n    }\r\n\r\n}));\r\n\r\n\r\nexport default function Reportesadmin() {\r\n    const classes = useStyles();\r\n    let [dataReportes, setDataReportes] = useState([]);\r\n    let [errorData, setErrorData] = useState(false);\r\n    let [mensajeErr, setMensajeErr] = useState('');\r\n    let [banderaCambiarEstado, setBanderaCambiarEstado] = useState(false);\r\n    let [mensajeNotificacion, setmensajeNotificacion] = useState(false);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    let [detallesReporte, setDetallesReporte] = useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openEmpresa, setOpenEmpresa] = React.useState(false);\r\n    const [value, setValue] = React.useState('');\r\n    let [tipoAlerta, setTipoAlerta] = useState('success');\r\n    let [opciones, setOpciones] = useState('');\r\n    let [datosUsu, setDatosUsu] = useState({\r\n        id_usuario: '',\r\n        usuario: '',\r\n        idReporte: '',\r\n    });\r\n\r\n    let [empresaM, setEmpresaM] = useState({\r\n        idReporte: '',\r\n        empresa: ''\r\n    });\r\n\r\n    const getDataReportes = async () => {\r\n        try {\r\n            const { data } = await axios.get(\r\n                'https://ayd1-190621.herokuapp.com/ReportsAdmin',\r\n                {\r\n                    headers: {\r\n                        'Authorization': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidHlwZSI6MSwiaWF0IjoxNjI0MTc4OTM1LCJleHAiOjE2MjY3NzA5MzV9.jLHv1p_k8hSYYSgkQ5vrC3Ek-ew4JbW6QcD36PiOFm4',\r\n                    }\r\n                });\r\n            // if (data && data.length) {\r\n            if (data.correct) {\r\n\r\n                // console.log(data);\r\n                setErrorData(false);\r\n                // console.log('Cantidad de reportes: ' + data.data.length)\r\n                dataReportes = data.data.map((o, index) => {\r\n                    let usu = 'Anónimo';\r\n                    if (o.citize !== null) {\r\n                        usu = o.citize;\r\n\r\n                    }\r\n                    // 2021-06-20T05:58:53.000Z\r\n                    // let FR = o.dateofreport;\r\n                    let FR = new Date(Date.parse(o.dateofreport));\r\n                    FR = FR.getDate().toString() + \"/\" + (FR.getMonth() + 1) + \"/\" + FR.getFullYear().toString() + ' - ' +\r\n                        (FR.getHours()).toString() + ':' + FR.getMinutes().toString() + ':' + FR.getSeconds().toString()\r\n\r\n                    let FP = new Date(Date.parse(o.dateofproblem));\r\n                    FP = FP.getDate().toString() + \"/\" + (FP.getMonth() + 1) + \"/\" + FP.getFullYear().toString() + ' - ' +\r\n                        (FP.getHours()).toString() + ':' + FP.getMinutes().toString() + ':' + FP.getSeconds().toString()\r\n\r\n                    return {\r\n\r\n                        key: index, id_reporte: o.idreport, tipo_reporte: o.typereport,\r\n                        direccion: o.address, fecha_reportado: FR, fecha_problema: FP,\r\n                        descripcion: o.description, usuario_reporte: usu, id_usuario: o.iduser,\r\n                        imagenes: o.images, estado: o.status\r\n\r\n                    }\r\n                });\r\n            } else {\r\n                setErrorData(true);\r\n                setMensajeErr('No se pudo recuperar la información de los reportes.')\r\n            }\r\n        }\r\n        catch (err) {\r\n            setErrorData(true);\r\n            setMensajeErr('No se pudo conectar al servidor.')\r\n            setDataReportes([]);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        const timeOut = setInterval(() => {\r\n            getDataReportes();\r\n            setDataReportes([...dataReportes]);\r\n        }, 2000)\r\n        getDataReportes();\r\n        return () => clearInterval(timeOut);\r\n\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        // console.log(value)\r\n        setValue('')\r\n        setOpen(false);\r\n        setOpenEmpresa(false);\r\n    };\r\n\r\n    const handleEnviarNotiEmpresa = (event) => {\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        detallesReporte += '<br>Comentario: ' + value;\r\n        let data = {\r\n            content: detallesReporte,\r\n            company: empresaM.empresa\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCompanyNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.correct) {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + empresaM.idReporte + ' ha sido cerrado exitosamente. ' +\r\n                        '\\nSe ha enviado una notificación a: ' + empresaM.empresa + '.');\r\n                    // setmensajeConfirmacion('Se ha enviado una notificación al ciudadano con la actualización de su reporte exitosamente.')\r\n                } else {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + empresaM.idReporte + ' ha sido cerrado exitosamente.' +\r\n                        '\\nNo se ha enviado una notificación a: ' + empresaM.empresa + '.');\r\n                    setTipoAlerta('error');\r\n                }\r\n                espera();\r\n            }\r\n            );\r\n        setValue('')\r\n        setOpenEmpresa(false);\r\n    };\r\n\r\n    const handleEnviarNoti = (event) => {\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        detallesReporte += '<br>Comentario: ' + value;\r\n        let data = {\r\n            content: detallesReporte,\r\n            user_iduserto: datosUsu.id_usuario\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCitizenNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                //  console.log(response)\r\n                if (response.data.correct) {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente. ' +\r\n                        '\\nSe ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    // setmensajeConfirmacion('Se ha enviado una notificación al ciudadano con la actualización de su reporte exitosamente.')\r\n                } else {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente.' +\r\n                        '\\nNo se ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    setTipoAlerta('error');\r\n                }\r\n                espera();\r\n            }\r\n            );\r\n        setValue('')\r\n        setOpen(false);\r\n    };\r\n\r\n    const espera = () => {\r\n        setBanderaCambiarEstado(true);\r\n        setTimeout(() => {\r\n            setBanderaCambiarEstado(false);\r\n            setmensajeNotificacion('');\r\n            setTipoAlerta('success');\r\n        }, 5000)\r\n    }\r\n\r\n    const mostrarNotificacion = (tipo_de_cambio, idReporte, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        let nuevoEstado = '';\r\n        if (tipo_de_cambio === 1) {\r\n            setmensajeNotificacion('Ha seleccionado el reporte Registro No. ' + idReporte + ' para ser atentido. ')\r\n            nuevoEstado = 'ATENDIDO';\r\n            espera();\r\n        } else if (tipo_de_cambio === 2) {\r\n            nuevoEstado = 'PROCESADO';\r\n            let t = 'Delincuencia';\r\n            let company = 'Policía Nacional Civil'\r\n            if (tipo === 'bump') {\r\n                t = 'Bache'\r\n                company = 'Municipalidad de Mixco'\r\n            }\r\n            setEmpresaM({ idReporte: idReporte, empresa: company })\r\n            setDetallesReporte(\r\n                'Estado: ' + nuevoEstado +\r\n                '\\nRegistro No. : ' + idReporte +\r\n                '\\nTipo: ' + t +\r\n                '\\nFecha del Reporte: ' + fecha_reportado +\r\n                '\\nFecha del Problema: ' + fecha_problema +\r\n                '\\nDirección: ' + direccion +\r\n                '\\nDescripción: ' + descripcion\r\n            );\r\n            setOpenEmpresa(true);\r\n        } else if (tipo_de_cambio === 3) {\r\n            nuevoEstado = 'CERRADO'\r\n            if (usuario !== 'Anónimo') {\r\n                setDatosUsu({ id_usuario: id_usuario, usuario: usuario, idReporte: idReporte })\r\n                let t = 'Delincuencia';\r\n                if (tipo === 'bump') {\r\n                    t = 'Bache'\r\n                }\r\n                setDetallesReporte(\r\n                    'Estado: ' + nuevoEstado +\r\n                    '\\nRegistro No. : ' + idReporte +\r\n                    '\\nTipo: ' + t +\r\n                    '\\nFecha del Reporte: ' + fecha_reportado +\r\n                    '\\nFecha del Problema: ' + fecha_problema +\r\n                    '\\nDirección: ' + direccion +\r\n                    '\\nDescripción: ' + descripcion\r\n                );\r\n                setOpen(true);\r\n            } else {\r\n                setmensajeNotificacion('El reporte Registro No. ' + idReporte + ' ha sido cerrado exitosamente. ')\r\n                espera();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const metodoBtnCambiarEstado = (event, idReport, idStatus, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        const data = {\r\n            status_idstatus: idStatus + 1,\r\n        }\r\n        axios.put('https://ayd1-190621.herokuapp.com/ModifyReportStatus/' + idReport,\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.correct) {\r\n                    mostrarNotificacion(idStatus, idReport, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario);\r\n                }\r\n            }\r\n            );\r\n    }\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <div style={{ paddingLeft: '100px' }} >\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                    <InputLabel id=\"demo-simple-select-label\">Estado</InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={opciones}\r\n                        onChange={(valor) => { setOpciones(valor.target.value) }}\r\n                    >\r\n                        <MenuItem value={'pending'}>Pendiente</MenuItem>\r\n                        <MenuItem value={'attended'}>Atendiendo</MenuItem>\r\n                        <MenuItem value={'processed'}>Procesando</MenuItem>\r\n                        <MenuItem value={'finished'}>Finalizado</MenuItem>\r\n                        <MenuItem value={''}>Todos</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n            <Collapse in={banderaCambiarEstado}>\r\n                <Alert variant=\"filled\" severity={tipoAlerta} width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeNotificacion}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={errorData}>\r\n                <Alert variant=\"filled\" severity='error' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeErr}\r\n                </Alert>\r\n            </Collapse>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Ciudadanos\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea defaultValue={detallesReporte} rows='10' />\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{ width: '60%' }}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={(e) => { handleEnviarNoti(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog open={openEmpresa} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Empresas\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea defaultValue={detallesReporte} rows='10' />\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{ width: '60%' }}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={(e) => { handleEnviarNotiEmpresa(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>No.</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Reporte</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Estado Actual</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {dataReportes.filter(f => (opciones !== \"\" && opciones !== null ? f.estado.toString() === opciones : true)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.key}>\r\n                                    <TableCell key={'K1' + row.key} align=\"center\">\r\n                                        {row.key + 1}\r\n                                    </TableCell>\r\n                                    <TableCell key={'K2' + row.key}>\r\n                                        {/* INICIO TABLA CON DETALLES DE REPORTE */}\r\n                                        <TableContainer>\r\n                                            <Table className={classes.table} aria-label=\"customized table\">\r\n                                                <TableBody>\r\n                                                    {/* style={{border:'1px solid black', padding: '10px'}} */}\r\n                                                    <TableRow>\r\n                                                        <TableCell  >\r\n                                                            <label className={classes.subtitulos}>Registro:</label> &nbsp;  <label className={classes.text}>{row.id_reporte}</label>\r\n                                                        </TableCell>\r\n                                                        <TableCell colSpan='2' >\r\n                                                            <label className={classes.subtitulos}>Usuario: </label>&nbsp;  <label className={classes.text}>{row.usuario_reporte}</label>\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell >\r\n                                                            <label className={classes.subtitulos}>Tipo:</label> &nbsp;  <label className={classes.text}>\r\n                                                                {row.tipo_reporte === 'bump' ? 'Bacheo' : 'Delincuencia'}</label>\r\n                                                        </TableCell>\r\n                                                        <TableCell >\r\n                                                            <label className={classes.subtitulos}>Fecha del Reporte:</label> &nbsp;  <label className={classes.text}>{row.fecha_reportado}</label>\r\n                                                        </TableCell>\r\n                                                        <TableCell >\r\n                                                            <label className={classes.subtitulos}>Fecha del Suceso: </label>&nbsp;  <label className={classes.text}>{row.fecha_problema}</label>\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell colSpan=\"3\" >\r\n                                                            <label className={classes.subtitulos}>Dirección: </label>&nbsp;  <label className={classes.text}>{row.direccion}</label>\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell colSpan=\"3\" >\r\n                                                            <label className={classes.subtitulos}>Descripción: </label>&nbsp;  <label className={classes.text}>{row.descripcion}</label>\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </TableCell>\r\n                                    <TableCell key={'K3' + row.key} align=\"center\">\r\n                                        {\r\n                                            (\r\n                                                () => {\r\n                                                    if (row.estado.localeCompare(\"pending\") === 0) {\r\n                                                        return (\r\n                                                            <h1>Pendiente</h1>\r\n\r\n                                                        )\r\n                                                    } else if (row.estado.localeCompare(\"attended\") === 0) {\r\n                                                        return (\r\n                                                            <h1>Atendiendo</h1>\r\n\r\n                                                        )\r\n                                                    } else if (row.estado.localeCompare(\"processed\") === 0) {\r\n                                                        return (\r\n                                                            <h1>Procesando</h1>\r\n\r\n                                                        )\r\n                                                    }\r\n                                                    else if (row.estado.localeCompare(\"finished\") === 0) {\r\n                                                        return (\r\n                                                            <h1>Finalizado</h1>\r\n\r\n                                                        )\r\n                                                    }\r\n                                                }\r\n                                            )()\r\n                                        }\r\n\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={dataReportes.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport 'date-fns';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport '@rmwc/typography/styles';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    contenedor: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    alinearContenedor: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    table: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: '#393E46 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 940,\r\n    },\r\n    subtitulos: {\r\n        fontSize: '18px',\r\n        fontWeight: 'bolder',\r\n    },\r\n    text: {\r\n        fontSize: '19px',\r\n        fontFamily: 'Calibri'\r\n    },\r\n    root2: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        flexWrap: 'nowrap',\r\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n        transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n        color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n        background:\r\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n    inactive: {\r\n        pointerEvents: 'none', // pointer-events not supported below IE11\r\n        position: 'fixed'\r\n      }\r\n\r\n}));\r\n\r\n\r\nexport default function NotificacionesCompany() {\r\n    const classes = useStyles();\r\n    let [dataReportes, setDataReportes] = useState([]);\r\n    let [errorData, setErrorData] = useState(false);\r\n    let [mensajeErr, setMensajeErr] = useState('');\r\n    let [banderaCambiarEstado, setBanderaCambiarEstado] = useState(false);\r\n    let [mensajeNotificacion, setmensajeNotificacion] = useState(false);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    let [detallesReporte, setDetallesReporte] = useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openEmpresa, setOpenEmpresa] = React.useState(false);\r\n    const [value, setValue] = React.useState('');\r\n    let [tipoAlerta, setTipoAlerta] = useState('success');\r\n    let [datosUsu, setDatosUsu] = useState({\r\n        id_usuario: '',\r\n        usuario: '',\r\n        idReporte: '',\r\n    });\r\n\r\n    let [empresaM, setEmpresaM] = useState({\r\n        idReporte: '',\r\n        empresa: ''\r\n    });\r\n\r\n    const getDataReportes = async () => {\r\n        try {\r\n            const { data } = await axios.get(\r\n                'https://ayd1-190621.herokuapp.com/EmployeeCompanyNotifications',\r\n                {\r\n                    headers: {\r\n            'Authorization':localStorage.getItem('token'),\r\n                    }\r\n                });\r\n            // if (data && data.length) {\r\n            if (data.correct) {\r\n\r\n                // console.log(data);\r\n                let tmp = data.data.reverse();\r\n                // console.log(tmp);\r\n                setErrorData(false);\r\n                // console.log('Cantidad de reportes: ' + data.data.length)\r\n                dataReportes =tmp.map((o, index) => {\r\n                    \r\n                    // 2021-06-20T05:58:53.000Z\r\n                    // let FR = o.dateofreport;\r\n                    let FR = new Date(Date.parse(o.timestamp));\r\n                    FR = FR.getDate().toString() + \"/\" + (FR.getMonth() + 1) + \"/\" + FR.getFullYear().toString() + ' - ' +\r\n                        (FR.getHours()).toString() + ':' + FR.getMinutes().toString() + ':' + FR.getSeconds().toString()\r\n\r\n                    return {\r\n                        \r\n                        key: index, usuario_reporte: o.company, fecha_reportado: FR, descripcion: o.content\r\n                    \r\n                    }\r\n                });\r\n            } else {\r\n                setErrorData(true);\r\n                setMensajeErr('No se pudo recuperar la información de los reportes.')\r\n            }\r\n        }\r\n        catch (err) {\r\n            setErrorData(true);\r\n            setMensajeErr('No se pudo conectar al servidor.')\r\n            setDataReportes([]);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        const timeOut = setInterval(() => {\r\n            getDataReportes();\r\n            setDataReportes([...dataReportes]);\r\n        }, 2000)\r\n        getDataReportes();\r\n        return () => clearInterval(timeOut);\r\n\r\n    }, []);\r\n    \r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        // console.log(value)\r\n        setValue('')\r\n        setOpen(false);\r\n        setOpenEmpresa(false);\r\n    };\r\n\r\n    const handleEnviarNotiEmpresa = (event) => {\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        detallesReporte += '<br>Comentario: ' + value;\r\n        let data = {\r\n            content: detallesReporte,\r\n            company: empresaM.empresa\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCompanyNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.correct) {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + empresaM.idReporte + ' ha sido cerrado exitosamente. ' +\r\n                        '\\nSe ha enviado una notificación a: ' + empresaM.empresa + '.');\r\n                    // setmensajeConfirmacion('Se ha enviado una notificación al ciudadano con la actualización de su reporte exitosamente.')\r\n                } else {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + empresaM.idReporte + ' ha sido cerrado exitosamente.' +\r\n                        '\\nNo se ha enviado una notificación a: ' + empresaM.empresa + '.');\r\n                    setTipoAlerta('error');\r\n                }\r\n                espera();\r\n            }\r\n            );\r\n        setValue('')\r\n        setOpenEmpresa(false);\r\n    };\r\n\r\n    const handleEnviarNoti = (event) => {\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        detallesReporte += '<br>Comentario: ' + value;\r\n        let data = {\r\n            content: detallesReporte,\r\n            user_iduserto: datosUsu.id_usuario\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCitizenNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                //  console.log(response)\r\n                if (response.data.correct) {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente. ' +\r\n                        '\\nSe ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    // setmensajeConfirmacion('Se ha enviado una notificación al ciudadano con la actualización de su reporte exitosamente.')\r\n                } else {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente.' +\r\n                        '\\nNo se ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    setTipoAlerta('error');\r\n                }\r\n                espera();\r\n            }\r\n            );\r\n        setValue('')\r\n        setOpen(false);\r\n    };\r\n\r\n    const espera = () => {\r\n        setBanderaCambiarEstado(true);\r\n        setTimeout(() => {\r\n            setBanderaCambiarEstado(false);\r\n            setmensajeNotificacion('');\r\n            setTipoAlerta('success');\r\n        }, 5000)\r\n    }\r\n\r\n    const mostrarNotificacion = (tipo_de_cambio, idReporte, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        let nuevoEstado = '';\r\n        if (tipo_de_cambio === 1) {\r\n            setmensajeNotificacion('Ha seleccionado el reporte Registro No. ' + idReporte + ' para ser atentido. ')\r\n            nuevoEstado = 'ATENDIDO';\r\n            espera();\r\n        } else if (tipo_de_cambio === 2) {\r\n            nuevoEstado = 'PROCESADO';\r\n            let t = 'Delincuencia';\r\n            let company = 'Policía Nacional Civil'\r\n            if (tipo === 'bump') {\r\n                t = 'Bache'\r\n                company = 'Municipalidad de Mixco'\r\n            }\r\n            setEmpresaM({ idReporte: idReporte, empresa: company })\r\n            setDetallesReporte(\r\n                'Estado: ' + nuevoEstado +\r\n                '\\nRegistro No. : ' + idReporte +\r\n                '\\nTipo: ' + t +\r\n                '\\nFecha del Reporte: ' + fecha_reportado +\r\n                '\\nFecha del Problema: ' + fecha_problema +\r\n                '\\nDirección: ' + direccion +\r\n                '\\nDescripción: ' + descripcion \r\n            );\r\n            setOpenEmpresa(true);\r\n        } else if (tipo_de_cambio === 3) {\r\n            nuevoEstado = 'CERRADO'\r\n            if (usuario !== 'Anónimo') {\r\n                setDatosUsu({ id_usuario: id_usuario, usuario: usuario, idReporte: idReporte })\r\n                let t = 'Delincuencia';\r\n                if (tipo === 'bump') {\r\n                    t = 'Bache'\r\n                }\r\n                setDetallesReporte(\r\n                    'Estado: ' + nuevoEstado +\r\n                    '\\nRegistro No. : ' + idReporte +\r\n                    '\\nTipo: ' + t +\r\n                    '\\nFecha del Reporte: ' + fecha_reportado +\r\n                    '\\nFecha del Problema: ' + fecha_problema +\r\n                    '\\nDirección: ' + direccion +\r\n                    '\\nDescripción: ' + descripcion\r\n                );\r\n                setOpen(true);\r\n            } else {\r\n                setmensajeNotificacion('El reporte Registro No. ' + idReporte + ' ha sido cerrado exitosamente. ')\r\n                espera();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const metodoBtnCambiarEstado = (event, idReport, idStatus, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        const data = {\r\n            status_idstatus: idStatus + 1,\r\n        }\r\n        axios.put('https://ayd1-190621.herokuapp.com/ModifyReportStatus/' + idReport,\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.correct) {\r\n                    mostrarNotificacion(idStatus, idReport, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario);\r\n                }\r\n            }\r\n            );\r\n    }\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Collapse in={banderaCambiarEstado}>\r\n                <Alert variant=\"filled\" severity={tipoAlerta} width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeNotificacion}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={errorData}>\r\n                <Alert variant=\"filled\" severity='error' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeErr}\r\n                </Alert>\r\n            </Collapse>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Ciudadanos\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea defaultValue={detallesReporte} rows='10'/>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{width: '60%'}}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    \r\n                    <Button onClick={(e) => { handleEnviarNoti(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog open={openEmpresa} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Empresas\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea defaultValue={detallesReporte} rows='10'/>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{width: '60%'}}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    \r\n                    <Button onClick={(e) => { handleEnviarNotiEmpresa(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>No.</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Reporte</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {dataReportes.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.key}>\r\n                                    <TableCell key={'K1' + row.key} align=\"center\">\r\n                                        {row.key + 1}\r\n                                    </TableCell>\r\n                                    <TableCell key={'K2' + row.key}>\r\n                                        {/* INICIO TABLA CON DETALLES DE REPORTE */}\r\n                                        <TableContainer>\r\n                                            <Table className={classes.table} aria-label=\"customized table\">\r\n                                                <TableBody>\r\n                                                    {/* style={{border:'1px solid black', padding: '10px'}} */}\r\n                                                    <TableRow>\r\n                                                       \r\n                                                        <TableCell colSpan='2' >\r\n                                                            <label className={classes.subtitulos}>Empresa: </label>&nbsp;  <label className={classes.text}>{row.usuario_reporte}</label>\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell >\r\n                                                            <label className={classes.subtitulos}>Fecha del Reporte:</label> &nbsp;  <label className={classes.text}>{row.fecha_reportado}</label>\r\n                                                        </TableCell>\r\n                                                        \r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell colSpan=\"3\" >\r\n                                                            <label className={classes.subtitulos}>Descripción: </label>&nbsp;  <textarea defaultValue={row.descripcion} cols=\"110\" rows=\"9\" className={classes.text}/>\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                  \r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </TableCell>\r\n                                    <TableCell key={'K3' + row.key} align=\"center\">\r\n                                       {\r\n                                            (\r\n                                                () => {\r\n                                                    \r\n                                                }\r\n                                            )()\r\n                                        }\r\n                                            \r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={dataReportes.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport 'date-fns';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport '@rmwc/typography/styles';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    contenedor: {\r\n        textAlign: 'center',\r\n        display: 'block',\r\n    },\r\n    alinearContenedor: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: 'black 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    table: {\r\n        display: 'inline-block',\r\n        borderRadius: '10px',\r\n        border: '#393E46 1px solid',\r\n        backgroundColor: '#FFF',\r\n    },\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 940,\r\n    },\r\n    subtitulos: {\r\n        fontSize: '18px',\r\n        fontWeight: 'bolder',\r\n    },\r\n    text: {\r\n        fontSize: '19px',\r\n        fontFamily: 'Calibri'\r\n    },\r\n    root2: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        flexWrap: 'nowrap',\r\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n        transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n        color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n        background:\r\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n    inactive: {\r\n        pointerEvents: 'none', // pointer-events not supported below IE11\r\n        position: 'fixed'\r\n      }\r\n\r\n}));\r\n\r\n\r\nexport default function Notificacionesusuarios() {\r\n    const classes = useStyles();\r\n    let [dataReportes, setDataReportes] = useState([]);\r\n    let [errorData, setErrorData] = useState(false);\r\n    let [mensajeErr, setMensajeErr] = useState('');\r\n    let [banderaCambiarEstado, setBanderaCambiarEstado] = useState(false);\r\n    let [mensajeNotificacion, setmensajeNotificacion] = useState(false);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    let [detallesReporte, setDetallesReporte] = useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openEmpresa, setOpenEmpresa] = React.useState(false);\r\n    const [value, setValue] = React.useState('');\r\n    let [tipoAlerta, setTipoAlerta] = useState('success');\r\n    let [datosUsu, setDatosUsu] = useState({\r\n        id_usuario: '',\r\n        usuario: '',\r\n        idReporte: '',\r\n    });\r\n\r\n    let [empresaM, setEmpresaM] = useState({\r\n        idReporte: '',\r\n        empresa: ''\r\n    });\r\n\r\n    const getDataReportes = async () => {\r\n        try {\r\n            const { data } = await axios.get(\r\n                'https://ayd1-190621.herokuapp.com/EmployeeCitizenNotifications',\r\n                {\r\n                    headers: {\r\n            'Authorization':localStorage.getItem('token'),\r\n                    }\r\n                });\r\n            // if (data && data.length) {\r\n            if (data.correct) {\r\n                let tmp = data.data.reverse();\r\n                // console.log(tmp);\r\n                setErrorData(false);\r\n                dataReportes = tmp.map((o, index) => {\r\n               \r\n                    // 2021-06-20T05:58:53.000Z\r\n                    // let FR = o.dateofreport;\r\n                    let FR = new Date(Date.parse(o.timestamp));\r\n                    FR = FR.getDate().toString() + \"/\" + (FR.getMonth() + 1) + \"/\" + FR.getFullYear().toString() + ' - ' +\r\n                        (FR.getHours()).toString() + ':' + FR.getMinutes().toString() + ':' + FR.getSeconds().toString()\r\n\r\n                    \r\n                    return {\r\n                        \r\n                        key: index, usuario_reporte: o.email, fecha_reportado: FR, descripcion: o.content\r\n                    \r\n                    }\r\n                });\r\n            } else {\r\n                setErrorData(true);\r\n                setMensajeErr('No se pudo recuperar la información de los reportes.')\r\n            }\r\n        }\r\n        catch (err) {\r\n            setErrorData(true);\r\n            setMensajeErr('No se pudo conectar al servidor.')\r\n            setDataReportes([]);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        const timeOut = setInterval(() => {\r\n            getDataReportes();\r\n            setDataReportes([...dataReportes]);\r\n        }, 2000)\r\n        getDataReportes();\r\n        return () => clearInterval(timeOut);\r\n\r\n    }, []);\r\n    \r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        // console.log(value)\r\n        setValue('')\r\n        setOpen(false);\r\n        setOpenEmpresa(false);\r\n    };\r\n\r\n    const handleEnviarNotiEmpresa = (event) => {\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        detallesReporte += '<br>Comentario: ' + value;\r\n        let data = {\r\n            content: detallesReporte,\r\n            company: empresaM.empresa\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCompanyNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.correct) {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + empresaM.idReporte + ' ha sido cerrado exitosamente. ' +\r\n                        '\\nSe ha enviado una notificación a: ' + empresaM.empresa + '.');\r\n                    // setmensajeConfirmacion('Se ha enviado una notificación al ciudadano con la actualización de su reporte exitosamente.')\r\n                } else {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + empresaM.idReporte + ' ha sido cerrado exitosamente.' +\r\n                        '\\nNo se ha enviado una notificación a: ' + empresaM.empresa + '.');\r\n                    setTipoAlerta('error');\r\n                }\r\n                espera();\r\n            }\r\n            );\r\n        setValue('')\r\n        setOpenEmpresa(false);\r\n    };\r\n\r\n    const handleEnviarNoti = (event) => {\r\n        // setDetallesReporte(detallesReporte + '\\nComentario: ' + value);\r\n        detallesReporte += '<br>Comentario: ' + value;\r\n        let data = {\r\n            content: detallesReporte,\r\n            user_iduserto: datosUsu.id_usuario\r\n        }\r\n        axios.post('https://ayd1-190621.herokuapp.com/CreateCitizenNotification/',\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                //  console.log(response)\r\n                if (response.data.correct) {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente. ' +\r\n                        '\\nSe ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    // setmensajeConfirmacion('Se ha enviado una notificación al ciudadano con la actualización de su reporte exitosamente.')\r\n                } else {\r\n                    setmensajeNotificacion('El reporte Registro No. ' + datosUsu.idReporte + ' ha sido cerrado exitosamente.' +\r\n                        '\\nNo se ha enviado una notificación al ciudadano: ' + datosUsu.usuario + '.');\r\n                    setTipoAlerta('error');\r\n                }\r\n                espera();\r\n            }\r\n            );\r\n        setValue('')\r\n        setOpen(false);\r\n    };\r\n\r\n    const espera = () => {\r\n        setBanderaCambiarEstado(true);\r\n        setTimeout(() => {\r\n            setBanderaCambiarEstado(false);\r\n            setmensajeNotificacion('');\r\n            setTipoAlerta('success');\r\n        }, 5000)\r\n    }\r\n\r\n    const mostrarNotificacion = (tipo_de_cambio, idReporte, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        let nuevoEstado = '';\r\n        if (tipo_de_cambio === 1) {\r\n            setmensajeNotificacion('Ha seleccionado el reporte Registro No. ' + idReporte + ' para ser atentido. ')\r\n            nuevoEstado = 'ATENDIDO';\r\n            espera();\r\n        } else if (tipo_de_cambio === 2) {\r\n            nuevoEstado = 'PROCESADO';\r\n            let t = 'Delincuencia';\r\n            let company = 'Policía Nacional Civil'\r\n            if (tipo === 'bump') {\r\n                t = 'Bache'\r\n                company = 'Municipalidad de Mixco'\r\n            }\r\n            setEmpresaM({ idReporte: idReporte, empresa: company })\r\n            setDetallesReporte(\r\n                'Estado: ' + nuevoEstado +\r\n                '\\nRegistro No. : ' + idReporte +\r\n                '\\nTipo: ' + t +\r\n                '\\nFecha del Reporte: ' + fecha_reportado +\r\n                '\\nFecha del Problema: ' + fecha_problema +\r\n                '\\nDirección: ' + direccion +\r\n                '\\nDescripción: ' + descripcion \r\n            );\r\n            setOpenEmpresa(true);\r\n        } else if (tipo_de_cambio === 3) {\r\n            nuevoEstado = 'CERRADO'\r\n            if (usuario !== 'Anónimo') {\r\n                setDatosUsu({ id_usuario: id_usuario, usuario: usuario, idReporte: idReporte })\r\n                let t = 'Delincuencia';\r\n                if (tipo === 'bump') {\r\n                    t = 'Bache'\r\n                }\r\n                setDetallesReporte(\r\n                    'Estado: ' + nuevoEstado +\r\n                    '\\nRegistro No. : ' + idReporte +\r\n                    '\\nTipo: ' + t +\r\n                    '\\nFecha del Reporte: ' + fecha_reportado +\r\n                    '\\nFecha del Problema: ' + fecha_problema +\r\n                    '\\nDirección: ' + direccion +\r\n                    '\\nDescripción: ' + descripcion\r\n                );\r\n                setOpen(true);\r\n            } else {\r\n                setmensajeNotificacion('El reporte Registro No. ' + idReporte + ' ha sido cerrado exitosamente. ')\r\n                espera();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const metodoBtnCambiarEstado = (event, idReport, idStatus, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario) => {\r\n        const data = {\r\n            status_idstatus: idStatus + 1,\r\n        }\r\n        axios.put('https://ayd1-190621.herokuapp.com/ModifyReportStatus/' + idReport,\r\n            data,\r\n            {\r\n                headers: {\r\n                    'Authorization': localStorage.getItem('token')\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.data.correct) {\r\n                    mostrarNotificacion(idStatus, idReport, tipo, direccion, fecha_reportado, fecha_problema, descripcion, usuario, id_usuario);\r\n                }\r\n            }\r\n            );\r\n    }\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Collapse in={banderaCambiarEstado}>\r\n                <Alert variant=\"filled\" severity={tipoAlerta} width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeNotificacion}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={errorData}>\r\n                <Alert variant=\"filled\" severity='error' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    {mensajeErr}\r\n                </Alert>\r\n            </Collapse>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Ciudadanos\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea defaultValue={detallesReporte} rows='10'/>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{width: '60%'}}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    \r\n                    <Button onClick={(e) => { handleEnviarNoti(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog open={openEmpresa} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick={true}>\r\n                <Alert variant=\"filled\" severity='success' width=\"10px\" style={{ fontSize: '19px' }}>\r\n                    Notificaciones para Empresas\r\n                </Alert>\r\n                <DialogTitle id=\"form-dialog-title\">Detalles del reporte:</DialogTitle>\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <textarea defaultValue={detallesReporte} rows='10'/>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Escriba un comentario:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        id=\"outlined-multiline-flexible\"\r\n                        label=\"Comentario\"\r\n                        multiline\r\n                        rowsMax={5}\r\n                        style={{width: '60%'}}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    \r\n                    <Button onClick={(e) => { handleEnviarNotiEmpresa(e) }} color=\"primary\">\r\n                        Enviar notificación\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>No.</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}>Reporte</TableCell>\r\n                            <TableCell align=\"center\" style={{ fontWeight: 'bolder', fontSize: '15px', color: '#393E46' }}></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {dataReportes.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.key}>\r\n                                    <TableCell key={'K1' + row.key} align=\"center\">\r\n                                        {row.key + 1}\r\n                                    </TableCell>\r\n                                    <TableCell key={'K2' + row.key}>\r\n                                        {/* INICIO TABLA CON DETALLES DE REPORTE */}\r\n                                        <TableContainer>\r\n                                            <Table className={classes.table} aria-label=\"customized table\">\r\n                                                <TableBody>\r\n                                                    {/* style={{border:'1px solid black', padding: '10px'}} */}\r\n                                                    <TableRow>\r\n                                                       \r\n                                                        <TableCell colSpan='2' >\r\n                                                            <label className={classes.subtitulos}>Usuario: </label>&nbsp;  <label className={classes.text}>{row.usuario_reporte}</label>\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell >\r\n                                                            <label className={classes.subtitulos}>Fecha de envio:</label> &nbsp;  <label className={classes.text}>{row.fecha_reportado}</label>\r\n                                                        </TableCell>\r\n                                                        \r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell colSpan=\"3\" >\r\n                                                            <label className={classes.subtitulos}>Descripción: </label>&nbsp;  <textarea defaultValue={row.descripcion} cols=\"110\" rows=\"9\" className={classes.text}/>\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                  \r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </TableCell>\r\n                                    <TableCell key={'K3' + row.key} align=\"center\">\r\n                                       {\r\n                                            (\r\n                                                () => {\r\n                                                    \r\n                                                }\r\n                                            )()\r\n                                        }\r\n                                            \r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={dataReportes.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n    TopAppBar,\r\n    TopAppBarRow,\r\n    TopAppBarSection,\r\n    TopAppBarTitle,\r\n    TopAppBarFixedAdjust\r\n} from \"@rmwc/top-app-bar\";\r\n\r\nimport {\r\n    Drawer,\r\n    DrawerContent,\r\n    DrawerHeader,\r\n    DrawerTitle,\r\n    DrawerAppContent\r\n} from \"@rmwc/drawer\";\r\n\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemText\r\n} from \"@rmwc/list\";\r\n\r\nimport '@rmwc/typography/styles';\r\n\r\nimport '@rmwc/list/styles';\r\nimport '@material/list/dist/mdc.list.css';\r\nimport '@rmwc/drawer/styles';\r\nimport '@material/drawer/dist/mdc.drawer.css';\r\nimport '@material/ripple/dist/mdc.ripple.css';\r\nimport '@rmwc/top-app-bar/styles'\r\nimport '@material/top-app-bar/dist/mdc.top-app-bar.css';\r\nimport '@material/icon-button/dist/mdc.icon-button.css';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport '@rmwc/theme/styles';\r\nimport '@material/theme/dist/mdc.theme.css';\r\nimport '@rmwc/theme/theme.css';\r\nimport Login from '../Login/Login';\r\nimport NotFoundPage from '../NotFoundPage/NotFoundPage';\r\nimport Nuevousuario from '../nuevousuario/nuevousuario';\r\nimport Reportar from '../Reportar/Reportar';\r\nimport Reporte from '../Reporte/Reporte';\r\nimport Asistir from '../Asistir/Asistir';\r\nimport Carnet from '../Carnet/Carnet';\r\nimport Evento from '../Evento/Evento';\r\n\r\nimport Visualizar from '../Visualizar/Visualizar';\r\nimport Links from '../../components/Link/Links';\r\nimport AcercaDe from '../Login/AcercaDe';\r\nimport Reportes from '../Reportes/Reportes';\r\nimport Reportesadmin from '../Reportes/Reportesadmin';\r\nimport Notificacionescompany from '../Notificaciones/Notificacionescompany';\r\nimport Notificacionesusuarios from '../Notificaciones/Notificacionesusuarios';\r\n\r\nimport Inicio from '../Inicio/Inicio';\r\nconst useStyles = makeStyles(() => ({\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end'\r\n    },\r\n    margen: {\r\n        padding: '4px',\r\n        wordWrap: 'normal',\r\n        display: 'inline-block',\r\n        color: '#454545'\r\n    },\r\n    // link: {\r\n    //     textDecoration: 'none',\r\n    //     color: \"#f44336\",\r\n    //     fontWeight: 'bold',\r\n    // }, \r\n    font: {\r\n\r\n        textDecoration: 'none'\r\n    }, title: {\r\n        textAlign: \"center\",\r\n        color: \"#FBA21C\"\r\n    },\r\n    colorBar: {\r\n        backgroundColor: \"#5C8E04\",\r\n    },\r\n    link: {\r\n        textDecoration: 'none',\r\n        color: \"#FFF\",\r\n        fontWeight: 'bold',\r\n        padding: '-20px 1px',\r\n        wordWrap: 'normal',\r\n        display: 'inline-block'\r\n    },\r\n\r\n}));\r\n\r\nconst Dashboard = () => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    let [esAutenticado, setEsAutenticado] = useState();\r\n    const drawerOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const timeOut = setInterval(() => {\r\n            if (localStorage.getItem('esAutenticado')===\"true\") {\r\n                setEsAutenticado(true);\r\n            } else {\r\n                setEsAutenticado(false);\r\n            }\r\n        }, 3000);\r\n        return () => clearInterval(timeOut)\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div >\r\n            <Router>\r\n                <Drawer modal open={open} onClose={() => setOpen(false)} >\r\n                    \r\n                    <DrawerContent>\r\n                    <hr/>\r\n                        <List>\r\n                           \r\n                            <Links path='/Reportar' texto='Reportar' /> \r\n                            <Links path='/Visualizar' texto='Ver reportes' /> \r\n                            <Links path='/Asistir' texto='Marcar asistencia' /> \r\n                            <Links path='/Carnet' texto='Carnet' /> \r\n                            <Links path='/Evento' texto='Eventos' /> \r\n                        \r\n                        </List>\r\n                    </DrawerContent>\r\n                    \r\n                </Drawer>\r\n                <DrawerAppContent >\r\n                    <TopAppBar>\r\n                        <TopAppBarRow style={{  }}>\r\n                            <TopAppBarSection>\r\n                                <MenuIcon onClick={() => drawerOpen(!open)} />\r\n                                <TopAppBarTitle style={{fontSize:'12'}}>{localStorage.getItem('nameUser')}</TopAppBarTitle>\r\n                            </TopAppBarSection>\r\n                            <TopAppBarSection alignEnd>\r\n                                {esAutenticado\r\n                                    ?\r\n                                    <List>\r\n                                        {/* <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\r\n                                            <Badge badgeContent={11} color=\"secondary\">\r\n                                                <NotificationsIcon style={{color:'#fff'}}/>\r\n                                            </Badge>\r\n                                        </IconButton> */}\r\n                                        <Link to={'/'} className={classes.link}>\r\n                                            <ListItem >\r\n                                                <ListItemText>\r\n                                                    <ExitToAppIcon style={{ fontSize: '40px' }} />\r\n                                                </ListItemText>\r\n                                            </ListItem>\r\n                                        </Link>\r\n                                    </List>\r\n\r\n                                    : null\r\n                                }\r\n                            </TopAppBarSection>\r\n                        </TopAppBarRow>\r\n                    </TopAppBar>\r\n                    <TopAppBarFixedAdjust />\r\n\r\n                    <div style={{ height: '100rem' }}>\r\n                        <Switch>\r\n                            <Route exact path='/' component={Reportar} />\r\n                            <Route exact path='/Nuevousuario' component={Nuevousuario} />\r\n                            <Route exact path='/Nosotros' component={AcercaDe} />\r\n                            <Route exact path='/Visualizar' component={Visualizar} />\r\n                            <Route exact path='/Reportar' component={Reportar} />\r\n                            <Route exact path='/Reporte' component={Reporte} />\r\n                            <Route exact path='/Asistir' component={Asistir} />\r\n                            <Route exact path='/Carnet' component={Carnet} />\r\n                            <Route exact path='/Evento' component={Evento} />\r\n                    \r\n                            <Route exact path='/NotFoundPage' component={NotFoundPage} />\r\n                            <Redirect from=\"*\" to=\"/NotFoundPage\" />\r\n                        </Switch>\r\n                    </div>\r\n                </DrawerAppContent>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Dashboard);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Dashboard from './screens/Dashboard/Dashboard';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n  <Dashboard/>\r\n</Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}